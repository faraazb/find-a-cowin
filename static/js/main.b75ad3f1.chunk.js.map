{"version":3,"sources":["features/settings/settingsSlice.js","features/finder/filters/filters.js","features/finder/sorting/sorting.js","features/cowin/cowinSlice.js","features/finder/Session.jsx","features/starred-centers/starredCentersSlice.js","features/finder/Center.jsx","features/finder/Selectors.jsx","features/finder/filters/FeeTypeFilters.jsx","utils/DateUtilities.js","features/settings/Settings.jsx","features/finder/filters/FilterPopover.jsx","features/finder/Finder.jsx","features/home/Home.jsx","features/FourOFour.jsx","features/starred-centers/StarredCenters.jsx","App.jsx","app/store.js","reportWebVitals.js","index.js"],"names":["settingsMap","defaultSettings","initialState","calendarByDistrictView","localStorage","getItem","calendarByDistrictAutoRefresh","calendarByDistrictAutoRefreshInterval","parseInt","settingsSlice","createSlice","name","reducers","resetSettings","state","action","setItem","setCalendarByDistrictView","viewName","payload","setCalendarByDistrictAutoRefreshInterval","interval","removeItem","toString","actions","isFree","centers","filter","center","fee_type","isPaid","byVaccine","vaccines","filteredCenters","some","session","includes","vaccine","sessions","newCenters","forEach","newCenter","clone","push","byKeyword","keywords","target","center_id","address","block_name","join","toLowerCase","el","indexOf","combineMultipleAgeConditions","ages","filterFields","joins","val1","length","byAgeCategory","categories","values","eighteenAbove","eighteenFortyFour","fortyFiveAbove","min","max","undefined","byCenterTotalDoses","sortOrder","orderBy","sumBy","available_capacity","states","districts","selected","stateEnt","stateName","stateId","districtEnt","districtName","districtId","calendarByDistrict","calendarByCenter","vaccinationReports","publicReports","status","JSON","parse","getCalendarByStarredCenters","error","filters","feeType","covaxin","checked","covishield","sputnik","minAge","maxAge","sort","doses","totalDoses","fetchCalendarByDistrict","createAsyncThunk","a","date","axios","get","response","data","fetchCalendarByCenter","centerId","fetchStates","fetchDistricts","fetchVaccinationReports","fetchPublicReports","cowinSlice","resetDistrictStore","resetCalendarByDistrictStore","setSelectedState","setCalendarByCenterStatus","fetchStatus","setSelectedDistrict","setFeeFilter","typeSelected","setKeywordFilter","setVaccineFilter","value","setAgeFilter","age","extraReducers","pending","fulfilled","rejected","message","meta","arg","selectCalendarByDistrict","cowin","selectCalendarByCenter","selectKeywordFilter","selectFeeFilters","selectVaccineFilter","selectAgeFilter","selectAllStates","selectAllDistricts","selectSelectedState","selectSelectedDistrict","selectFilteredData","createSelector","feeFilters","transformations","filterIsFree","filterIsPaid","selectedVaccines","pickBy","nextVaccines","Object","partialRight","filterByVaccine","filterByAgeCategory","filterByKeyword","sortByCenterTotalDoses","flow","SessionTags","props","map","id","className","intent","Intent","PRIMARY","minimal","icon","available_capacity_dose1","available_capacity_dose2","SessionTable","min_age_limit","max_age_limit","starredCentersSlice","resetStarredCenters","_action","stringify","setStarredCenters","selectStarredCenters","starredCenters","WARNING","SUCCESS","CenterCard","content","loading","showStarButton","viewType","useSelector","settings","dispatch","useDispatch","starred","vaccine_fees","vaccine_fee","fee","console","log","text","onClick","event","nextStarredCenters","val","unstarCenter","small","starredNavLink","href","process","AppToaster","show","starCenter","filterList","query","title","_index","exactMatch","normalizedTitle","normalizedQuery","StateSelector","setState","selectedState","items","popoverProps","popoverClassName","inputValueRenderer","state_name","itemRenderer","handleClick","_modifiers","_query","state_id","onItemSelect","_event","itemPredicate","index","noResults","disabled","fill","rightIcon","DistrictSelector","setDistrict","selectedDistrict","district","district_name","district_id","StateSelector2","React","memo","DistrictSelector2","FeeTypeFilters","feeFilter","alignmentVertical","feeTypeChange","feeTypeVal","vertical","label","onChange","alignIndicator","Alignment","RIGHT","formatDate","separator","formatId","month","getMonth","day","getDate","year","getFullYear","yearShort","substr","Settings","isOpen","setIsOpen","view","autoRefresh","autoRefreshInt","nickDisplayMap","handleClose","viewOptions","refreshOptions","canOutsideClickClose","onClose","usePortal","option","FilterPopover","useState","vaccineFilter","ageCategoryChecked","handleVaccineChange","handleAgeCategoryChange","DANGER","Classes","POPOVER2_DISMISS","POPOVER2_CONTENT_SIZING","interactionKind","onInteraction","placement","Finder","calendarFetchStatus","unfilteredCenters","searchInputValues","isSettingsOpen","setSettingsOpen","autoRefreshInterval","statesFetchStatus","intervalRef","useRef","refreshData","Date","toLocaleTimeString","useEffect","current","clearInterval","intervalId","setInterval","size","description","clearButton","leftIcon","placeholder","rightElement","to","Home","position","MINIMAL","class","FourOFour","StarredCenters","initializeStarred","outlined","_id","getCenterContent","Toaster","create","Position","TOP","FocusStyleManager","onlyShowFocusOnTabs","App","initializeSettings","isDarkTheme","window","matchMedia","matches","setIsDarkTheme","mqListener","e","darkThemeMq","addEventListener","removeEventListener","useThemeDetector","themeButton","setThemeButton","document","getElementById","classList","add","basename","align","LEFT","div","contains","remove","path","exact","store","configureStore","reducer","cowinReducer","settingsReducer","starredCentersReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b75ad3f1.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\n\n\nconst settingsMap = {\n    calendarByDistrictView: \"SETTINGS_CALENDARBYDIST_VIEW\",\n    calendarByDistrictAutoRefresh: \"SETTINGS_CALENDARBYDIST_AR\",\n    calendarByDistrictAutoRefreshInterval: \"SETTINGS_CALENDARBYDIST_AR_INT\"\n}\n\nconst defaultSettings = {\n    calendarByDistrictView: \"table\",\n    calendarByDistrictAutoRefresh: false,\n    calendarByDistrictAutoRefreshInterval: null\n\n}\n\nconst initialState = {\n    calendarByDistrictView: localStorage.getItem(settingsMap.calendarByDistrictView) || defaultSettings.calendarByDistrictView,\n    calendarByDistrictAutoRefresh: localStorage.getItem(settingsMap.calendarByDistrictAutoRefresh) === \"true\"\n        || defaultSettings.calendarByDistrictAutoRefresh,\n    calendarByDistrictAutoRefreshInterval: parseInt(localStorage.getItem(settingsMap.calendarByDistrictAutoRefreshInterval))\n        || defaultSettings.calendarByDistrictAutoRefreshInterval\n}\n\n\nexport const settingsSlice = createSlice({\n    name: 'settings',\n    initialState,\n    reducers: {\n        resetSettings: (state, action) => {\n            localStorage.setItem('SETTINGS', 'true');\n            localStorage.setItem(settingsMap.calendarByDistrictView, defaultSettings.calendarByDistrictView);\n            localStorage.setItem(settingsMap.calendarByDistrictAutoRefresh,\n                defaultSettings.calendarByDistrictAutoRefresh);\n            localStorage.setItem(settingsMap.calendarByDistrictAutoRefreshInterval,\n                defaultSettings.calendarByDistrictAutoRefreshInterval)\n            state.calendarByDistrictView = defaultSettings.calendarByDistrictView;\n            state.calendarByDistrictAutoRefresh = defaultSettings.calendarByDistrictAutoRefresh;\n            state.calendarByDistrictAutoRefreshInterval = defaultSettings.calendarByDistrictAutoRefreshInterval;\n        },\n        setCalendarByDistrictView: (state, action) => {\n            const { viewName } = action.payload;\n            state.calendarByDistrictView = viewName;\n            localStorage.setItem(settingsMap.calendarByDistrictView, viewName);\n        },\n        setCalendarByDistrictAutoRefreshInterval: (state, action) => {\n            const { interval } = action.payload;\n            if (interval === null) {\n                state.calendarByDistrictAutoRefresh = false;\n                state.calendarByDistrictAutoRefreshInterval = null;\n                localStorage.setItem('SETTINGS_CALENDARBYDIST_AR', 'false')\n                localStorage.removeItem('SETTINGS_CALENDARBYDIST_AR_INT')\n            }\n            else {\n                state.calendarByDistrictAutoRefresh = true;\n                state.calendarByDistrictAutoRefreshInterval = interval;\n                localStorage.setItem('SETTINGS_CALENDARBYDIST_AR', 'true')\n                localStorage.setItem('SETTINGS_CALENDARBYDIST_AR_INT', interval.toString())\n            }\n        }\n    }\n});\n\nexport const {\n    resetSettings,\n    setCalendarByDistrictView,\n    setCalendarByDistrictAutoRefreshInterval\n} = settingsSlice.actions;\n\nexport const selectSettings = (state) => state.settings;\n\nexport default settingsSlice.reducer;\n","import { filter, some, clone } from \"lodash/fp\";\n\nexport function isFree(centers) {\n    return filter(center => center.fee_type === \"Free\", centers);\n}\n\nexport function isPaid(centers) {\n    return filter(center => center.fee_type === \"Paid\", centers);\n}\n\nexport function byVaccine(centers, vaccines) {\n    let filteredCenters = filter(center => {\n        return some(session => vaccines.includes(session.vaccine), center.sessions);\n    }, centers);\n    let newCenters = []\n    filteredCenters.forEach(center => {\n        let newCenter = clone(center)\n        newCenter.sessions = filter(session => vaccines.includes(session.vaccine), center.sessions);\n        newCenters.push(newCenter)\n    })\n    return newCenters;\n}\n\nexport function byKeyword(centers, keywords) {\n    return filter(center => {\n        const target = [\n            center.center_id.toString(),\n            center.name,\n            center.address,\n            center.block_name\n        ].join(' ').toLowerCase();\n        return some(el => target.indexOf(el.toLowerCase()) >= 0, keywords)\n    }, centers);\n}\n\n\nexport function byAge(centers, ages) {\n    const {minAge, maxAge} = ages\n    let filteredCenters = filter(center => {\n        return some(session => {\n            if (minAge && maxAge) {\n                return session.min_age_limit === minAge && session.max_age_limit === maxAge;\n            }\n            else if (minAge && !maxAge) {\n                return session.min_age_limit === minAge;\n            }\n        }, center.sessions);\n    }, centers);\n    let newCenters = []\n    filteredCenters.forEach(center => {\n        let newCenter = clone(center)\n        newCenter.sessions = filter(session => {\n            if (minAge && maxAge) {\n                return session.min_age_limit === minAge && session.max_age_limit === maxAge;\n            }\n            else if (minAge && !maxAge) {\n                return session.min_age_limit === minAge;\n            }\n        }, center.sessions);\n        newCenters.push(newCenter)\n    })\n    return newCenters;\n}\n\n/* \nA terribly specific function for helping the byAgeCategory filter function.\nWorks for now, since there are only 3 age categories, hence only 6+1 combinaions are possible.\nTakes an array of age values, array containing \"min_age\" and \"max_age\" and then uses\nthe join array to determine whether to AND (join: true) or to OR (join: false) the conditions.\n*/\nfunction combineMultipleAgeConditions(session, ages, filterFields, joins) {\n    let val1 = joins[0] ? \n            session[filterFields[0]] === ages[0] && session[filterFields[1]] === ages[1] : \n            (session[filterFields[0]] === ages[0] || session[filterFields[1]] === ages[1]);\n    if (ages.length === 2) {\n        return val1;\n    }\n    // Currently, three conditional checks are only required when 18+ and 45+ is checked\n    // to filter out the 18-44 slots. Hence, note that the statements are using the unequal sign.\n    if (ages.length === 3) {\n        return joins[1] ?\n            val1 && session[filterFields[2]] !== ages[2] :\n            val1 || session[filterFields[2]] !== ages[2]\n    }\n    return false;\n}\n\n/* \nFilters age by category, the if-else ladder determines what minimum and maximum values\nto use for filtering depending on the categories selected (values array). \nSince multiple, disconnected ranges like 18+ and 45+ can be checked by the user, a helper \nfunction which can take multiple min. or max. values and other parameters is used.\n*/\nexport function byAgeCategory(centers, categories) {\n    const {eighteenAbove, eighteenFortyFour, fortyFiveAbove} = categories;\n    let values, filterFields, joins;\n    let min = \"min_age_limit\";\n    let max = \"max_age_limit\";\n    if (eighteenAbove === eighteenFortyFour && eighteenAbove === fortyFiveAbove) {\n        return centers;\n    }\n    if (eighteenAbove && eighteenFortyFour) {\n        values = [18, 44];\n        filterFields = [min, max];\n        joins = [false];\n    }\n    else if (eighteenAbove && fortyFiveAbove) {\n        // filter centers with:\n        // (min = 18 OR min = 45) AND max != 44\n        // a false in joins means OR, a true means AND\n        // filter centers with: \n        // (filterFields[0] = values[0] {joins[0]} filterFields[1] = values[1]) AND filterFields[2] != values[2]\n        values = [18, 45, 44];\n        filterFields = [min, min, max];\n        joins = [false, true];\n    }\n    else if (eighteenFortyFour && fortyFiveAbove) {\n        values = [45, 44];\n        filterFields = [min, max];\n        joins = [false];\n    }\n    else if (eighteenAbove) {\n        values = [18, undefined];\n        filterFields = [min, max];\n        joins = [true];\n    }\n    else if (eighteenFortyFour) {\n        values = [18, 44];\n        filterFields = [min, max];\n        joins = [true];\n    }\n    else if (fortyFiveAbove) {\n        values = [45, undefined];\n        filterFields = [min, max];\n        joins = [true];\n    }\n    else {\n        return centers;\n    }\n\n    let filteredCenters = filter(center => {\n        return some(session => {\n            return combineMultipleAgeConditions(session, values, filterFields, joins);\n        }, center.sessions);\n    }, centers);\n    let newCenters = []\n    filteredCenters.forEach(center => {\n        let newCenter = clone(center)\n        newCenter.sessions = filter(session => {\n            return combineMultipleAgeConditions(session, values, filterFields, joins);\n        }, center.sessions);\n        newCenters.push(newCenter);\n    })\n    return newCenters;\n}","import { clone, orderBy, sumBy } from \"lodash/fp\"\n\nexport function byCenterTotalDoses(centers, sortOrder) {\n    return orderBy(center => sumBy(session => session.available_capacity, center.sessions), sortOrder, centers);\n}\n\nexport function bySessionDoses(centers, sortOrder) {\n    let nextCenters = [];\n    centers.forEach(center => {\n        let nextCenter = clone(center)\n        nextCenter.sessions = orderBy(\n            ['available_capacity_dose1', 'available_capacity_dose2'], \n            sortOrder, \n            center.sessions\n        )\n        nextCenters.push(nextCenter);\n    });\n    return nextCenters;\n}\n","import {createAsyncThunk, createSelector, createSlice} from \"@reduxjs/toolkit\";\nimport axios from \"axios\"\nimport { flow, partialRight, pickBy } from \"lodash/fp\";\nimport {\n\tbyAgeCategory as filterByAgeCategory, \n    byKeyword as filterByKeyword, \n    byVaccine as filterByVaccine, \n    isFree as filterIsFree, \n    isPaid as filterIsPaid \n} from \"../finder/filters/filters\";\nimport { \n\tbyCenterTotalDoses as sortByCenterTotalDoses \n} from \"../finder/sorting/sorting\";\n\nconst getCalendarByStarredCenters = () => {\n    let status = {}\n    const centers = JSON.parse(localStorage.getItem(\"starred\"));\n    if (centers) {\n        for (let center of centers) {\n            status[center] = 'idle'\n        }\n    }\n    return status;\n}\n\nconst initialState = {\n    states: [],\n    districts: [],\n    selected: {\n        stateEnt: {\n            stateName: \"Select a State\",\n            stateId: null\n        },\n        districtEnt: {\n            districtName: \"Select a District\",\n            districtId: null\n        },\n    },\n    calendarByDistrict: {\n        centers: []\n    },\n    calendarByCenter: {},\n    vaccinationReports: {},\n    publicReports: {},\n    status: {\n        states: 'idle',\n        districts: 'idle',\n        calendarByDistrict: 'idle',\n        calendarByCenter: getCalendarByStarredCenters(),\n        vaccinationReports: 'idle',\n        publicReports: 'idle'\n    },\n    error: {\n        states: null,\n        districts: null,\n        calendarByDistrict: null,\n        vaccinationReports: null,\n        publicReports: null\n    },\n    filters: {\n        keywords: [],\n        feeType: {\n            \"Free\": true,\n            \"Paid\": true\n        },\n        // vaccines: {\n        //     \"COVAXIN\": false,\n        //     \"COVISHIELD\": true,\n        //     \"SPUTNIK V\": false\n        // },\n        vaccines: {\n            covaxin: {\n                name: \"COVAXIN\",\n                checked: true\n            },\n            covishield: {\n                name: \"COVISHIELD\",\n                checked: true\n            },\n            sputnik: {\n                name: \"SPUTNIK V\",\n                checked: true\n            }\n        },\n        ages: {\n            minAge: null,\n            maxAge: null,\n\t\t\teighteenAbove: true,\n\t\t\teighteenFortyFour: true,\n\t\t\tfortyFiveAbove: true\n        }\n    },\n    sort: {\n        session: {\n            doses: ['desc', 'desc'],\n        },\n        center: {\n\t\t\ttotalDoses: 'desc'\n        }\n    }\n}\n\nexport const fetchCalendarByDistrict = createAsyncThunk('cowin/calendarByDistrict',\n    async ({districtId, date}) => {\n    const response = await axios.get(\n        `https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict?district_id=\n            ${districtId}&date=${date}`);\n    return response.data;\n});\n\n// export const fetchCalendarByCenter = createAsyncThunk('cowin/calendarByCenter',\n//     async ({centerId, date}, {fulfillWithValue, rejectWithValue}) => {\n//     try {\n//         const response = await axios.get(\n//             `https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByCenter?center_id=\n//             ${centerId}&date=${date}`);\n//         return fulfillWithValue({center: centerId, sessions: response.data[\"centers\"]})\n//     } catch (error) {\n//         return rejectWithValue({id: centerId, message: error.response.data});\n//     }\n// });\n\nexport const fetchCalendarByCenter = createAsyncThunk('cowin/calendarByCenter',\nasync ({centerId, date}) => {\n    const response = await axios.get(\n        `https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByCenter?center_id=\n    ${centerId}&date=${date}`);\n    return response.data[\"centers\"];\n});\n\nexport const fetchStates = createAsyncThunk('cowin/fetchStates',\n    async () => {\n    const response = await axios.get(\n        `https://cdn-api.co-vin.in/api/v2/admin/location/states`);\n    return response.data;\n});\n\nexport const fetchDistricts = createAsyncThunk('cowin/fetchDistricts',\n    async ({stateId}) => {\n    const response = await axios.get(\n        `https://cdn-api.co-vin.in/api/v2/admin/location/districts/${stateId}`);\n    return response.data;\n});\n\nexport const fetchVaccinationReports = createAsyncThunk('cowin/fetchVaccinationReports',\n    async ({stateId, districtId, date}) => {\n        const response = await axios.get(`https://api.cowin.gov.in/api/v1/reports/v2/getVacPublicReports?\n        state_id=${stateId}&district_id=${districtId}&date=${date}`);\n        return response.data\n    })\n\nexport const fetchPublicReports = createAsyncThunk('cowin/fetchPublicReports',\n    async ({stateId, districtId, date}) => {\n        const response = await axios.get(`https://api.cowin.gov.in/api/v1/reports/v2/getPublicReports?\n        state_id=${stateId}&district_id=${districtId}&date=${date}`);\n        return response.data\n    })\n\nexport const cowinSlice = createSlice({\n    name: 'cowin',\n    initialState,\n    reducers: {\n        resetDistrictStore: (state) => {\n            state.districts = [];\n        },\n        resetCalendarByDistrictStore: (state) => {\n            state.calendarByDistrict = { centers: [] };\n        },\n        setSelectedState: (state, action) => {\n            const { stateName } = action.payload;\n            state.selected.stateEnt.stateName = stateName;\n            state.status.calendarByDistrict = 'idle';\n            if (action.payload.stateId) {\n                state.selected.stateEnt.stateId = action.payload.stateId;\n            }\n            else {\n                state.selected.stateEnt.stateId = null;\n            }\n        },\n        setCalendarByCenterStatus: (state, action) => {\n            const { centerId, fetchStatus } = action.payload;\n            state.status.calendarByCenter[centerId] = fetchStatus;\n        },\n        setSelectedDistrict: (state, action) => {\n            const { districtName } = action.payload;\n            state.selected.districtEnt.districtName = districtName;\n            if (action.payload.districtId) {\n                state.selected.districtEnt.districtId = action.payload.districtId;\n            }\n            else {\n                state.selected.districtEnt.districtId = null\n            }\n        },\n        setFeeFilter: (state, action) => {\n            const { feeType, typeSelected } = action.payload;\n            state.filters.feeType[feeType] = typeSelected;\n        },\n        setKeywordFilter: (state, action) => {\n            state.filters.keywords = action.payload;\n        },\n        setVaccineFilter: (state, action) => {\n            const { vaccine, value } = action.payload;\n            switch (vaccine) {\n                case \"COVAXIN\":\n                    state.filters.vaccines.covaxin.checked = value;\n                    break;\n                case \"COVISHIELD\":\n                    state.filters.vaccines.covishield.checked = value;\n                    break;\n                case \"SPUTNIK V\":\n                    state.filters.vaccines.sputnik.checked = value;\n                    break;\n                default:\n                    break;\n            }\n        },\n\t\t// setAgeFilter: (state, action) => {\n\t\t// \tconst { minAge, maxAge } = action.payload;\n\t\t// \tstate.filters.ages.minAge = minAge;\n\t\t// \tstate.filters.ages.maxAge = maxAge;\n\t\t// }\n\t\tsetAgeFilter: (state, action) => {\n\t\t\tconst { age, value } = action.payload;\n\t\t\tswitch (age) {\n\t\t\t\tcase \"age-18-above\":\n\t\t\t\t\tstate.filters.ages.eighteenAbove = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"age-18-44\":\n\t\t\t\t\tstate.filters.ages.eighteenFortyFour = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"age-45-above\":\n\t\t\t\t\tstate.filters.ages.fortyFiveAbove = value;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n    },\n    extraReducers: {\n        [fetchCalendarByDistrict.pending]: (state) => {\n            state.status.calendarByDistrict = 'loading';\n        },\n        [fetchCalendarByDistrict.fulfilled]: (state, action) => {\n            state.status.calendarByDistrict = 'succeeded';\n            state.calendarByDistrict = action.payload;\n        },\n        [fetchCalendarByDistrict.rejected]: (state, action) => {\n            state.status.calendarByDistrict = 'failed';\n            state.error.calendarByDistrict = action.error.message;\n        },\n        [fetchCalendarByCenter.pending]: (state, action) => {\n            let center = action.meta.arg.centerId;\n            state.status.calendarByCenter[center] = 'idle'\n        },\n        [fetchCalendarByCenter.fulfilled]: (state, action) => {\n            let center = action.meta.arg.centerId;\n            state.status.calendarByCenter[center] = 'succeeded';\n            state.calendarByCenter[center] = action.payload;\n        },\n        [fetchCalendarByCenter.rejected]: (state, action) => {\n            // let center = action.error.id;\n            let center = action.meta.arg.centerId;\n            state.status.calendarByCenter[center] = 'failed';\n            state.error.calendarByCenter[center] = action.error.message;\n        },\n        [fetchStates.pending]: (state) => {\n            state.status.states = 'loading';\n        },\n        [fetchStates.fulfilled]: (state, action) => {\n            state.status.states = 'succeeded';\n            //Here we select the slates key from the response\n            // Response: {\n            //  states: []\n            // }\n            state.states = action.payload.states;\n        },\n        [fetchStates.rejected]: (state, action) => {\n            state.status.states = 'failed';\n            state.error.states = action.error.message;\n        },\n        [fetchDistricts.pending]: (state) => {\n            state.status.districts = 'loading';\n        },\n        [fetchDistricts.fulfilled]: (state, action) => {\n            state.status.districts = 'succeeded';\n            state.districts = action.payload.districts;\n        },\n        [fetchDistricts.rejected]: (state, action) => {\n            state.status.districts = 'failed';\n            state.error.districts = action.error.message;\n        },\n        [fetchVaccinationReports.fulfilled]: (state, action) => {\n            state.status.vaccinationReports = 'succeeded';\n            state.error.vaccinationReports = null;\n            state.vaccinationReports = action.payload;\n        },\n        [fetchVaccinationReports.rejected]: (state, action) => {\n            state.status.vaccinationReports = 'failed';\n            state.error.vaccinationReports = action.error.message;\n        },\n        [fetchPublicReports.fulfilled]: (state, action) => {\n            state.status.publicReports = 'succeeded';\n            state.error.publicReports = null;\n            state.publicReports = action.payload;\n        },\n        [fetchPublicReports.rejected]: (state, action) => {\n            state.status.publicReports = 'failed';\n            state.error.publicReports = action.error.message;\n        }\n    },\n});\n\n\n\nexport const { resetDistrictStore,\n    resetCalendarByDistrictStore,\n    setKeywordFilter,\n    setFeeFilter,\n    setVaccineFilter,\n\tsetAgeFilter,\n    setSelectedState,\n    setSelectedDistrict,\n    setCalendarByCenterStatus\n} = cowinSlice.actions;\n\nexport const selectCalendarByDistrict = (state) => state.cowin.calendarByDistrict.centers;\nexport const selectCalendarByCenter = (state) => state.cowin.calendarByCenter;\n\nexport const selectKeywordFilter = (state) => state.cowin.filters.keywords;\nexport const selectFeeFilters = (state) => state.cowin.filters.feeType;\nexport const selectVaccineFilter = (state) => state.cowin.filters.vaccines;\nexport const selectAgeFilter = (state) => state.cowin.filters.ages;\n\nexport const selectAllStates = (state) => state.cowin.states;\nexport const selectAllDistricts = (state) => state.cowin.districts;\nexport const selectSelectedState = (state) => state.cowin.selected.stateEnt;\nexport const selectSelectedDistrict = (state) => state.cowin.selected.districtEnt;\n\nexport const selectVaxReportsLastThirtyDays = (state) => state.cowin.vaccinationReports.last30DaysVaccination;\n\nexport const selectPublicReports = (state) => state.cowin.publicReports;\nexport const selectPublicReportsBeneficiaries = (state) => state.cowin.publicReports.getBeneficiariesGroupBy;\n\nexport const selectFilteredData = createSelector(\n    selectCalendarByDistrict,\n    selectFeeFilters,\n    selectKeywordFilter,\n    selectVaccineFilter,\n    selectAgeFilter,\n    (state) => state.cowin.sort,\n    (centers, feeFilters, keywords, vaccines, ages, sort) => {\n        let transformations = []\n        if (feeFilters[\"Free\"] !== feeFilters[\"Paid\"]) {\n            if (feeFilters[\"Free\"]) {\n                transformations.push(filterIsFree);\n            }\n            else if (feeFilters[\"Paid\"]) {\n                transformations.push(filterIsPaid);\n            }\n        }\n        // if (vaccines) {\n        //     let selectedVaccines = Object.keys(pickBy(vaccine => vaccine, vaccines));\n        //     console.log(selectedVaccines)\n        //     transformations.push(partialRight(filterByVaccine, [selectedVaccines]));\n        // }\n        if (vaccines) {\n            let selectedVaccines = pickBy(vaccine => vaccine.checked, vaccines);\n            let nextVaccines = [];\n            Object.values(selectedVaccines).forEach(vaccine => nextVaccines.push(vaccine.name));\n            if (nextVaccines.length > 0) {\n                transformations.push(partialRight(filterByVaccine, [nextVaccines]));\n            }\n        }\n\t\tif (ages) {\n\t\t\ttransformations.push(partialRight(filterByAgeCategory, [ages]))\n\t\t}\n        if (keywords.length > 0) {\n            transformations.push(partialRight(filterByKeyword, [keywords]));\n        }\n\t\t// TODO: vaccine price sorting\n        // Implementing a drag-drop interface with the ability to rank the sorts would be amazing.\n\t\ttransformations.push(partialRight(sortByCenterTotalDoses, [[sort.center.totalDoses]]));\n\t\t// Sort slots within a center by dose count\n        // transformations.push(partialRight(sortByDosesWithinCenter, [sort.session.doses]));\n        // console.log(filters)\n        return flow(transformations)(centers);\n    }\n)\n\nexport default cowinSlice.reducer;\n","import {Icon, Intent, Tag} from \"@blueprintjs/core\";\nimport React from \"react\";\n\n/*\n* Session uses the Blueprintjs {@link https://blueprintjs.com/docs/#core/components/tag Tag} component to render a\n* session's details\n*\n* */\n\nfunction SessionTags(props) {\n    const { sessions } = props;\n\n    return (\n        <>\n            {sessions && sessions.map((session, id) => (\n                <Tag key={id} className=\"session\" intent={Intent.PRIMARY} minimal={true}>\n                    <Icon icon={\"calendar\"} />\n                    <span className=\"session-info\">{session.date}</span>\n                    <span className=\"session-info\">{session.vaccine}</span>\n                    <span className=\"session-info\">Dose 1: {session.available_capacity_dose1}</span>\n                    <span className=\"session-info\">Dose 2: {session.available_capacity_dose2}</span>\n                </Tag>\n            ))}\n        </>\n    )\n}\n\nfunction SessionTable(props) {\n    const { sessions } = props;\n\n    return (\n        <table className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-interactive sessions-table\">\n            <thead>\n            <tr>\n                <th>Date</th>\n                <th>Vaccine</th>\n                <th>Dose 1</th>\n                <th>Dose 2</th>\n                <th>Min. Age</th>\n                <th>Max. Age</th>\n            </tr>\n            </thead>\n            <tbody>\n            {sessions && sessions.map((session, id) => (\n                <tr key={id}>\n                    <td>\n                        {session.date}\n                    </td>\n                    <td>\n                        {session.vaccine}\n                    </td>\n                    <td>\n                        {session.available_capacity_dose1}\n                    </td>\n                    <td>\n                        {session.available_capacity_dose2}\n                    </td>\n                    <td>\n                        {session.min_age_limit || \"-\"}\n                    </td>\n                    <td>\n                        {session.max_age_limit || \"-\"}\n                    </td>\n                </tr>\n            ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport { SessionTable, SessionTags };","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    centers: JSON.parse(localStorage.getItem(\"starred\")) || []\n}\n\n\nexport const starredCentersSlice = createSlice({\n    name: 'starredCenters',\n    initialState,\n    reducers: {\n        resetStarredCenters: (state, _action) => {\n            localStorage.setItem(\"starred\", JSON.stringify([]));\n            state.centers = []\n        },\n        setStarredCenters: (state, action) => {\n            const { centers } = action.payload;\n            localStorage.setItem(\"starred\", JSON.stringify(centers));\n            state.centers = centers;\n        }\n    }\n});\n\nexport const {\n    resetStarredCenters,\n    setStarredCenters\n} = starredCentersSlice.actions;\n\nexport const selectStarredCenters = (state) => state.starredCenters.centers;\n\nexport default starredCentersSlice.reducer;\n","import {Button, H5, Intent, Tag} from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { SessionTable, SessionTags } from \"./Session\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectStarredCenters, setStarredCenters} from \"../starred-centers/starredCentersSlice\";\nimport {setCalendarByCenterStatus} from \"../cowin/cowinSlice\";\nimport {AppToaster} from \"../../App\";\n\n/*\n* Defines the Blueprintjs Intent color to use with a particular fee type\n*\n* */\nconst feeType = {\n    \"Paid\": Intent.WARNING,\n    \"Free\": Intent.SUCCESS\n}\n\n/*\n* CenterCard component renders a center and its Cowin using the Session component. Currently, every session\n* is rendered a Tag, but it's not very good looking.\n*\n* */\nfunction CenterCard(props) {\n    const { center, loading = false, showStarButton = true } = props;\n    // maybe lift viewType and starred to finder itself\n    const viewType = useSelector((state => state.settings.calendarByDistrictView));\n    const dispatch = useDispatch();\n    const starred = useSelector(selectStarredCenters);\n\n    if (loading) {\n        return (\n            <div key={center} className=\"center bp3-elevation-1\">\n                <div className=\"center-info-container\">\n                    <span className=\"center-name bp3-skeleton\">Loading</span>\n                    <Tag className=\"center-fee-type bp3-skeleton\" intent={Intent.PRIMARY}>\n                        Loading\n                    </Tag>\n                    <div className=\"vaccine-fee-tags\">\n                        <Tag key={1} className=\"fee-type bp3-skeleton\">Loading</Tag>\n                        <Tag key={1} className=\"fee-type bp3-skeleton\">Loading</Tag>\n                        <Tag key={1} className=\"fee-type bp3-skeleton\">Loading</Tag>\n                    </div>\n                    <Button className={\"bp3-skeleton\"} icon={\"star\"} />\n                </div>\n                <div className=\"center-info-container\">\n                    <span className=\"center-info bp3-skeleton\">Loading</span>\n                    <span className=\"center-info block-name bp3-skeleton\">Loading</span>\n                </div>\n                <div className=\"sessions-skeleton bp3-skeleton\">\n                    Loading\n                </div>\n            </div>\n        )\n    }\n\n    let content;\n    if (viewType === \"table\") {\n        content = <SessionTable sessions={center.sessions} />\n    }\n    else if (viewType === \"tags\") {\n        content = <SessionTags sessions={center.sessions} />\n    }\n\n    const starCenter = (event, centerId) => {\n        dispatch(setCalendarByCenterStatus({centerId: centerId, fetchStatus: \"idle\"}))\n        dispatch(setStarredCenters({centers: [...starred, centerId]}));\n        let starredNavLink = {\n            href: `${process.env.PUBLIC_URL}/starred`,\n            text: \"See here\"\n        };\n        AppToaster.show({\n            message: \"Center starred!\",\n            intent: Intent.SUCCESS,\n            icon: \"star\",\n            action: starredNavLink\n        });\n    }\n\n    const unstarCenter = (event, centerId) => {\n        const nextStarredCenters = starred.filter((val) => val !== centerId);\n        dispatch(setStarredCenters({centers: nextStarredCenters}));\n    }\n\n    const starButton = (centerId) => {\n        console.log(starred);\n        if (starred.includes(centerId)) {\n            return <Button\n                className=\"center-star-button\"\n                icon={\"star\"} text={\"Remove\"}\n                onClick={(event) => unstarCenter(event, center.center_id)}\n                small={true}\n            />\n        }\n        return <Button\n            className=\"center-star-button\"\n            icon={\"star-empty\"} text={\"Star\"}\n            onClick={(event) => starCenter(event, center.center_id)}\n            small={true}\n        />\n    }\n\n    return (\n        <div key={center.center_id} className=\"center bp3-elevation-1\">\n            <div className=\"center-info-container\">\n                <H5>{center.name}</H5>\n            </div>\n            <div className=\"center-info-container center-actions\">\n                <Tag className=\"center-fee-type\" intent={feeType[center.fee_type]}>\n                    {center.fee_type}\n                </Tag>\n                {center.vaccine_fees && center.vaccine_fees.map((vaccine_fee, id) => (\n                    <Tag key={id} className=\"fee-type\">\n                        {vaccine_fee.vaccine}: ₹ {vaccine_fee.fee}\n                    </Tag>\n                ))}\n                {\n                    showStarButton && starButton(center.center_id)\n                }\n            </div>\n            <div className=\"center-info-container\">\n                <span className=\"center-info\">{center.address}</span>\n                <span className=\"center-info block-name\">[{center.block_name}]</span>\n            </div>\n            <div className=\"sessions\">\n                {content}\n            </div>\n        </div>\n    )\n}\n\nexport { CenterCard };","import {Button, MenuItem} from \"@blueprintjs/core\";\nimport {Select} from \"@blueprintjs/select\";\nimport React from \"react\";\n\n/*\n* Simple filtering function, extracted here so that it doesn't have to repeated in both\n* State and District Selectors\n*\n* */\nconst filterList = (query, title, _index, exactMatch) => {\n    const normalizedTitle = title.toLowerCase();\n    const normalizedQuery = query.toLowerCase();\n\n    if (exactMatch) {\n        return normalizedTitle === normalizedQuery;\n    } else {\n        return normalizedTitle.indexOf(normalizedQuery) >= 0;\n    }\n}\n\n/*\n* StateSelector uses the {@link https://blueprintjs.com/docs/#select Blueprintjs Select} component,\n* provides a list of states to filter and choose from.\n* TODO Consider merging both State and District selectors and managing\n*  differences through props.\n*\n* */\nconst StateSelector = (props) => {\n    const { setState, selectedState, states } = props;\n    // const states = useSelector(selectAllStates);\n\n    // // Fetch states for StateSelector when it mounts\n    // useEffect(() => {\n    //     if (statesFetchStatus === \"idle\") {\n    //         dispatch(fetchStates());\n    //     }\n    // }, [statesFetchStatus, dispatch]);\n\n    const renderInputValue = (state) => state.state_name;\n\n    // Handle State selector value change\n    const handleValueChange = (state, _event) => {\n        setState(state);\n    }\n\n    // Render a Blueprintjs Menu Item for every state\n    const renderItem = (state, { handleClick, _modifiers, _query}) => {\n        return (\n            <MenuItem key={state.state_id} text={state.state_name} onClick={handleClick}/>\n        );\n    }\n\n    // Called by the {@link https://blueprintjs.com/docs/#select Blueprintjs Select} component whenever\n    // the query has a new input keyword. Select will provide query,\n    // the State item {state_name: string, state_id: string} the index and exactMatch.\n    const filterStates = (query, state, index, exactMatch) => {\n        return filterList(query, state.state_name, index, exactMatch)\n    }\n\n    return (\n        <div className=\"selector slot-toolbar-item\">\n            <Select\n                items={states}\n                popoverProps={{popoverClassName: \"selector-popover\", minimal: true}}\n                inputValueRenderer={renderInputValue}\n                itemRenderer={renderItem}\n                onItemSelect={handleValueChange}\n                itemPredicate={filterStates}\n                noResults={<MenuItem disabled={true} text=\"No results.\" />}\n            >\n                <Button fill={true} text={selectedState.stateName} rightIcon=\"caret-down\" />\n            </Select>\n        </div>\n    )\n}\n\n/*\n* DistrictSelector uses the {@link https://blueprintjs.com/docs/#select Blueprintjs Select} component,\n* provides a list of districts to filter and choose from.\n*\n* */\nconst DistrictSelector = (props) => {\n    const { setDistrict, selectedDistrict, districts } = props;\n    // const districts = useSelector(selectAllDistricts);\n\n    const renderDistrictInputValue = (district) => district.district_name;\n\n    const renderDistrictItem = (district, { handleClick, _modifiers, _query }) => {\n        return (\n            <MenuItem key={district.district_id} text={district.district_name} onClick={handleClick}/>\n        )\n    }\n\n    const districtSelected = (district, _event) => {\n        setDistrict(district);\n    }\n\n    // Called by the Blueprintjs Select component whenever the query has a new input keyword.\n    // Select will provide query, the State item {district_name: string, district_id: string},\n    // the index and exactMatch.\n    const filterDistricts = (query, district, index, exactMatch) => {\n        return filterList(query, district.district_name, index, exactMatch);\n    }\n\n    return (\n        <div className=\"selector slot-toolbar-item\">\n            <Select\n                items={districts}\n                popoverProps={{popoverClassName: \"selector-popover\", minimal: true}}\n                inputValueRenderer={renderDistrictInputValue}\n                itemRenderer={renderDistrictItem}\n                onItemSelect={districtSelected}\n                itemPredicate={filterDistricts}\n                noResults={<MenuItem disabled={true} text=\"No results.\" />}\n            >\n                <Button fill={true} text={selectedDistrict.districtName} rightIcon=\"caret-down\" />\n            </Select>\n        </div>\n    )\n}\n\nconst StateSelector2 = React.memo(StateSelector);\nconst DistrictSelector2 = React.memo(DistrictSelector);\n\nexport { StateSelector, StateSelector2, DistrictSelector, DistrictSelector2};\n","import {Alignment, Checkbox, ControlGroup} from \"@blueprintjs/core\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectFeeFilters, setFeeFilter} from \"../../cowin/cowinSlice\";\n\n/*\n* Free/Paid fee type filtering checkbox component.\n* It dispatches the setFeeFilter action whenever checkbox state changes.\n* See cowinSlice as to how the filtering works\n* */\nfunction FeeTypeFilters(props) {\n    const dispatch = useDispatch();\n    const feeFilter = useSelector(selectFeeFilters);\n    const { alignmentVertical } = props;\n\n    // @param {String} feeTypeVal Free or Paid\n    // Update feeFilter[feeTypeVal] state in store by NOT(current value)\n    // See cowinSlice for \"filter\" object structure\n    const feeTypeChange = (event, feeTypeVal) => {\n        dispatch(setFeeFilter({feeType: feeTypeVal, typeSelected: !feeFilter[feeTypeVal]}));\n    }\n\n    return (\n        <div className=\"fee-types\">\n            <ControlGroup\n                fill={true}\n                vertical={alignmentVertical}\n            >\n                <Checkbox\n                    className=\"fee-type-checkbox\"\n                    label={\"Free\"}\n                    checked={feeFilter[\"Free\"]}\n                    onChange={(event) => feeTypeChange(event, \"Free\")}\n                    alignIndicator={Alignment.RIGHT}\n                />\n                <Checkbox\n                    className=\"fee-type-checkbox\"\n                    label={\"Paid\"}\n                    checked={feeFilter[\"Paid\"]}\n                    onChange={(event) => feeTypeChange(event, \"Paid\")}\n                    alignIndicator={Alignment.RIGHT}\n                />\n            </ControlGroup>\n        </div>\n    )\n}\n\nexport { FeeTypeFilters };\n","/*\n* Returns the date in dd%mm%yy using the specified separator:%\n* @param {Date} d Date object\n* @param {String} separator Separator to use\n* */\nfunction formatDate(date, separator, formatId)  {\n    let month = date.getMonth();\n    let day = date.getDate().toString();\n    let year = date.getFullYear().toString();\n    let yearShort = year.substr(-2);\n    // month is zero-indexed\n    month = (month + 1).toString();\n    // Pad single digit month/dates with preceding 0\n    if (month.length === 1) {\n        month = \"0\" + month;\n    }\n    if (day.length === 1) {\n        day = \"0\" + day;\n    }\n    switch (formatId) {\n        case 1:\n            return [day, month, yearShort].join(separator);\n        case 2:\n            return [year, month, day].join(separator);\n        default:\n            return [day, month, yearShort].join(separator);\n    }\n}\n\nexport { formatDate };\n","import React from \"react\";\nimport {Button, Card, ControlGroup, Dialog, Icon, Switch} from \"@blueprintjs/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { setCalendarByDistrictAutoRefreshInterval, setCalendarByDistrictView} from \"./settingsSlice\";\nimport \"./_settings.scss\"\n\nfunction Settings(props) {\n    const dispatch = useDispatch();\n    const { isOpen, setIsOpen } = props;\n    const view = useSelector(state => state.settings.calendarByDistrictView);\n    const autoRefresh = useSelector(state => state.settings.calendarByDistrictAutoRefresh);\n    const autoRefreshInt = useSelector(state => state.settings.calendarByDistrictAutoRefreshInterval);\n\n    const nickDisplayMap = {\n        \"table\": \"Table\",\n        \"tags\": \"Tags\",\n        4000: \"4 Seconds\",\n        5000: \"5 Seconds\",\n        6000: \"6 Seconds\",\n        10000: \"10 Seconds\",\n    }\n\n    const handleClose = () => setIsOpen(false);\n\n    const handleViewTypeChange = (event) => {\n        // event.preventDefault();\n        dispatch(setCalendarByDistrictView({viewName: event.target.value}));\n    }\n\n    // viewOptions items must exactly be the same as the nicknames for the settings used in settingsSlice\n    const viewOptions = [\"tags\", \"table\"];\n\n    const refreshOptions = [4000, 5000, 6000, 10000]\n\n    const handleAutoRefreshChange = (event) => {\n        if (event.target.checked) {\n            dispatch(setCalendarByDistrictAutoRefreshInterval({interval: 5000}));\n        }\n        else {\n            dispatch(setCalendarByDistrictAutoRefreshInterval({interval: null}));\n        }\n    }\n\n    const handleAutoRefreshValueChange = (event) => {\n        dispatch(setCalendarByDistrictAutoRefreshInterval({interval: event.target.value}));\n    }\n\n    // const isAutoRefreshEnabled = () => calByDist.autoRefresh;\n    \n    return (\n        <Dialog id=\"settings\" className=\"bp3-dialog settings-dialog\"\n                isOpen={isOpen}\n                canOutsideClickClose={true}\n                onClose={handleClose}\n                usePortal={false}\n        >\n            <div className=\"bp3-dialog-header\">\n                <h4 className=\"bp3-heading\">Settings</h4>\n                <Button\n                    aria-label=\"Close\"\n                    className=\"bp3-dialog-close-button bp3-button bp3-minimal\"\n                    icon={\"cross\"}\n                    onClick={handleClose}\n                >\n                </Button>\n            </div>\n            <div className=\"bp3-dialog-body\">\n                <Card className=\"settings-item\">\n                    <ControlGroup vertical={true}>\n                        <div className=\"settings-caption-vertical\">\n                            View appointments of a Center as\n                        </div>\n                        <div className=\"bp3-html-select\">\n                            <select onChange={handleViewTypeChange} value={view}>\n                                {\n                                    viewOptions && viewOptions.map((option, id) => (\n                                        <option key={id} value={option}>{nickDisplayMap[option]}</option>\n                                    ))\n                                }\n                            </select>\n                            <Icon icon={\"double-caret-vertical\"} />\n                        </div>\n                    </ControlGroup>\n                </Card>\n                <Card className=\"settings-item\">\n                    <ControlGroup fill={true}>\n                        <Switch\n                            label={\"Auto refresh data\"}\n                            checked={autoRefresh}\n                            onChange={handleAutoRefreshChange}\n                            alignIndicator={\"right\"}\n                        />\n                        <div className=\"settings-caption-horizontal\">\n                            Auto-refresh Interval\n                        </div>\n                        <div className=\"bp3-html-select\">\n                            <select onChange={handleAutoRefreshValueChange}\n                                    value={autoRefreshInt || \"\"}\n                                    disabled={!autoRefresh}\n                            >\n                                {\n                                    refreshOptions && refreshOptions.map((option, id) => (\n                                        <option key={id} value={option}>{nickDisplayMap[option]}</option>\n                                    ))\n                                }\n                            </select>\n                            <Icon icon={\"double-caret-vertical\"} />\n                        </div>\n                    </ControlGroup>\n                </Card>\n            </div>\n        </Dialog>\n    )\n}\n\nexport default Settings;","import { React, useState } from \"react\";\nimport \"./_filter-popover.scss\";\nimport { Checkbox, Alignment, Button, Intent, H6 } from \"@blueprintjs/core\";\nimport { Classes, Popover2 } from \"@blueprintjs/popover2\"\nimport { useSelector } from \"react-redux\";\nimport { selectAgeFilter, selectVaccineFilter, setAgeFilter, setVaccineFilter } from \"../../cowin/cowinSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { FeeTypeFilters } from \"./FeeTypeFilters\";\n\nexport function FilterPopover() {\n\tconst dispatch = useDispatch();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst vaccineFilter = useSelector(selectVaccineFilter);\n\tconst ageCategoryChecked = useSelector(selectAgeFilter)\n\n\tconst handleVaccineChange = (event, vaccine) => {\n\t\t// console.log(vaccine, event.target.checked);\n\t\tdispatch(setVaccineFilter({vaccine: vaccine, value: event.target.checked}));\n\t}\n\n\tconst handleAgeCategoryChange = (event) => {\n\t\tdispatch(setAgeFilter({age: event.target.id, value: event.target.checked}));\n\t}\n\n\treturn (\n\t\t<Popover2\n\t\t\tcontent={\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"filter-group\">\n\t\t\t\t\t\t<H6>Vaccines</H6>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tlabel={\"Covaxin\"}\n\t\t\t\t\t\t\tchecked={vaccineFilter.covaxin.checked}\n\t\t\t\t\t\t\tonChange={(event) => handleVaccineChange(event, \"COVAXIN\")}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tlabel={\"Covishield\"}\n\t\t\t\t\t\t\tchecked={vaccineFilter.covishield.checked}\n\t\t\t\t\t\t\tonChange={(event) => handleVaccineChange(event, \"COVISHIELD\")}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tlabel={\"Sputnik V\"}\n\t\t\t\t\t\t\tchecked={vaccineFilter.sputnik.checked}\n\t\t\t\t\t\t\tonChange={(event) => handleVaccineChange(event, \"SPUTNIK V\")}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"filter-group is-hidden-desktop\">\n\t\t\t\t\t\t<H6>Fee Type</H6>\n\t\t\t\t\t\t<FeeTypeFilters alignmentVertical={true} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"filter-group\">\n\t\t\t\t\t\t<H6>Age</H6>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tid=\"age-18-above\"\n\t\t\t\t\t\t\tlabel={\"18 and above\"}\n\t\t\t\t\t\t\tchecked={ageCategoryChecked.eighteenAbove}\n\t\t\t\t\t\t\tonChange={handleAgeCategoryChange}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tid=\"age-18-44\"\n\t\t\t\t\t\t\tlabel={\"18 to 44\"}\n\t\t\t\t\t\t\tchecked={ageCategoryChecked.eighteenFortyFour}\n\t\t\t\t\t\t\tonChange={(handleAgeCategoryChange)}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tid=\"age-45-above\"\n\t\t\t\t\t\t\tlabel={\"45 and above\"}\n\t\t\t\t\t\t\tchecked={ageCategoryChecked.fortyFiveAbove}\n\t\t\t\t\t\t\tonChange={handleAgeCategoryChange}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Button intent={Intent.DANGER} className={Classes.POPOVER2_DISMISS} text=\"Close\" fill={true}/>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\tpopoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n\t\t\tinteractionKind=\"click\"\n\t\t\tisOpen={isOpen}\n\t\t\tonInteraction={state => setIsOpen(state)}\n\t\t\tplacement=\"bottom\"\n\t\t>\n\t\t\t<Button icon=\"filter-list\" text=\"Filters\" />\n\t\t</Popover2>\n\t);\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    fetchCalendarByDistrict,\n    fetchDistricts,\n    fetchStates,\n    resetCalendarByDistrictStore,\n    resetDistrictStore, selectAllDistricts,\n    selectAllStates, selectCalendarByDistrict,\n    selectFilteredData,\n    selectKeywordFilter,\n    selectSelectedDistrict,\n    selectSelectedState,\n    setKeywordFilter,\n    setSelectedDistrict,\n    setSelectedState\n} from \"../cowin/cowinSlice\";\nimport \"./_finder.scss\";\nimport { CenterCard } from \"./Center\";\nimport {DistrictSelector2, StateSelector2} from \"./Selectors\";\nimport {Button, ButtonGroup, Icon, Intent, NonIdealState, Spinner, TagInput} from \"@blueprintjs/core\";\nimport { FeeTypeFilters } from \"./filters/FeeTypeFilters\";\nimport {formatDate} from \"../../utils/DateUtilities\";\nimport Settings from \"../settings/Settings\";\nimport { FilterPopover } from \"./filters/FilterPopover\";\nimport {NavLink} from \"react-router-dom\";\n\n/*\n* A component which shows the Available Slots (active slots returned by CoWIN API)\n* after the user selects a State and District.\n* It also allows filtering by attributes: keywords (center name, center address\n* and center block), fee type (Free/Paid).\n* */\nexport function Finder() {\n    const dispatch = useDispatch();\n    const calendarFetchStatus = useSelector((state) => state.cowin.status.calendarByDistrict);\n    // Use the filtered calendarByDistrict data from the store\n    const states = useSelector(selectAllStates);\n    const districts = useSelector(selectAllDistricts);\n    // const centers = useSelector(selectFilteredCalendarByDistrict);\n    const centers = useSelector(selectFilteredData);\n    const unfilteredCenters = useSelector(selectCalendarByDistrict)\n    const selectedState = useSelector(selectSelectedState);\n    const selectedDistrict = useSelector(selectSelectedDistrict);\n    const searchInputValues = useSelector(selectKeywordFilter);\n    const [isSettingsOpen, setSettingsOpen] = useState(false);\n    const autoRefresh = useSelector(state => state.settings.calendarByDistrictAutoRefresh);\n    const autoRefreshInterval = useSelector(state => state.settings.calendarByDistrictAutoRefreshInterval);\n    const statesFetchStatus = useSelector((state) => state.cowin.status.states);\n    const intervalRef = useRef();\n\n    const refreshData = () => {\n        if (selectedDistrict.districtName === \"Select a District\" || selectedState.stateName === \"Select a State\") {\n            return\n        }\n        let date = new Date();\n        date = formatDate(date, '-');\n        console.log(\"Refreshing data\", new Date().toLocaleTimeString(), {districtName: selectedDistrict.districtName});\n        dispatch(fetchCalendarByDistrict({districtId: selectedDistrict.districtId, date: date}));\n    }\n\n    useEffect(() => {\n        if (autoRefresh) {\n            console.log(\"Old timeout:\", intervalRef.current)\n            clearInterval(intervalRef.current);\n            let intervalId = setInterval(() => {\n                refreshData()\n            }, autoRefreshInterval);\n            intervalRef.current = intervalId;\n            console.log(\"New timeout:\", intervalRef.current)\n            return () => clearInterval(intervalRef.current);\n        }\n    });\n\n    // useEffect(() => {\n    //     if (autoRefresh) {\n    //         let timer = setTimeout(() => {\n    //                 refreshData();\n    //                 console.log(\"Refreshing data\", new Date().toLocaleTimeString(), {districtName: selectedDistrict.districtName});\n    //             },\n    //             autoRefreshInterval\n    //         );\n    //         console.log(\"New timeout:\", timer)\n    //         return () => clearTimeout(timer);\n    //     }\n    // });\n\n    // let timer;\n    // useEffect(() => {\n    //     if (autoRefresh) {\n    //         if (previousIntervalId) {\n    //             clearInterval(previousIntervalId)\n    //             console.log(\"Previous Interval:\", previousIntervalId)\n    //         }\n    //         let intervalId = setInterval(refreshData, autoRefreshInterval)\n    //         console.log(\"New Interval:\", intervalId)\n    //         setPreviousIntervalId(intervalId)\n    //         return () => clearInterval(intervalId);\n    //     }\n    // });\n\n    /*\n    * Decide what {content} to load in the \"centers\" div.\n    * Depending on the fetch status and filters, show nice contextual messages for each case.\n    * */\n    let content;\n    if (calendarFetchStatus === \"idle\" || selectedDistrict.district_name === \"Select a district\") {\n        content = <NonIdealState\n            icon={\"info-sign\"}\n            title={\"Select State and District\"}\n        ><div>\n            <Icon icon={\"lightbulb\"} intent={Intent.WARNING}/>\n            Tip: Use the refresh button to refresh the data\n        </div></NonIdealState>\n    }\n    else if (calendarFetchStatus === \"loading\") {\n        content = <Spinner className={\"centers-loading-spinner\"} intent={Intent.PRIMARY} size={50} />\n    }\n    else if (calendarFetchStatus === \"succeeded\") {\n        if (centers.length > 0) {\n            content = centers.map((center, id) => (\n                <CenterCard key={id} center={center} />\n            ));\n        }\n        else {\n            content = <NonIdealState\n                icon={\"zoom-out\"}\n                title={\"No centers match your query.\"}\n                description={\"It might be helpful to divide your query into multiple keywords.\"}\n            />\n        }\n    }\n    else if (calendarFetchStatus === \"succeeded\" && unfilteredCenters.length === 0) {\n        content = <NonIdealState\n            icon={\"issue\"}\n            title={\"Currently, no slots are available.\"}\n            description={\"Please check again after sometime.\"}\n        />\n    }\n    else if (calendarFetchStatus === \"failed\") {\n        content = <NonIdealState\n            icon={\"error\"}\n            title={\"There was a problem!\"}\n            description={\"Couldn't load data.\"}\n        />\n    }\n\n    // Clear Button element to clear/reset the Search bar\n    const clearButton = (\n        <Button\n            icon={\"cross\"}\n            minimal={true}\n            onClick={() => dispatch(setKeywordFilter([]))}\n        />\n    );\n\n    const toggleSettings = () => {\n        setSettingsOpen(!isSettingsOpen);\n    }\n\n    // Fetch states for StateSelector when it mounts\n    useEffect(() => {\n        if (statesFetchStatus === \"idle\") {\n            dispatch(fetchStates());\n        }\n    }, [statesFetchStatus, dispatch]);\n\n    const handleStateChange = (state) => {\n        // Changed the dispatch order here\n        // Reset the current District and Center list by resetting the store\n        dispatch(resetDistrictStore());\n        dispatch(resetCalendarByDistrictStore());\n        dispatch(setSelectedState({stateId: state.state_id, stateName: state.state_name}));\n        // Fetch new districts for the new State\n        dispatch(fetchDistricts({stateId: state.state_id}));\n        // Reset the District selector value\n        dispatch(setSelectedDistrict({districtName: \"Select a District\"}))\n    }\n\n    const handleDistrictChange = (district) => {\n        dispatch(setSelectedDistrict({districtId: district.district_id, districtName: district.district_name}))\n        let date = new Date();\n        date = formatDate(date, '-');\n        dispatch(fetchCalendarByDistrict({districtId: district.district_id, date: date}));\n    }\n\n    return (\n        <div className=\"slot-checker-container\">\n            <div className=\"slot-checker\">\n                {/*<div className=\"header\">*/}\n                {/*    Slot Finder*/}\n                {/*</div>*/}\n                <div className=\"slot-toolbar-container\">\n                    <div className=\"slot-toolbar columns\">\n                        <div className=\"slot-toolbar-item-group selectors column is-narrow-desktop\">\n                            <StateSelector2\n                                states={states}\n                                selectedState={selectedState}\n                                setState={handleStateChange}\n                            />\n                            <DistrictSelector2\n                                districts={districts}\n                                selectedDistrict={selectedDistrict}\n                                setDistrict={handleDistrictChange}\n                            />\n                        </div>\n                        <div className=\"slot-toolbar-item-group column\">\n                            <TagInput\n                                className=\"slot-toolbar-item search\"\n                                leftIcon={\"search\"}\n                                placeholder={\"Search with multiple keywords..\"}\n                                onChange={(values => dispatch(setKeywordFilter(values)))}\n                                values={searchInputValues}\n                                rightElement={clearButton}\n                            />\n                            <div className=\"is-hidden-mobile slot-toolbar-item fee-types-container\">\n                                <FeeTypeFilters alignmentVertical={false}/>\n                            </div>\n                        </div>\n                        <div className=\"slot-toolbar-item-group column is-narrow-desktop\">\n                            <ButtonGroup>\n                                <Button icon={\"refresh\"} text={\"Refresh\"} onClick={refreshData}/>\n                                <NavLink to={\"/starred\"}>\n                                    <Button icon={\"star\"} text={\"Starred\"}/>\n                                </NavLink>\n                                <FilterPopover />\n                                <Button icon={\"settings\"} text={\"Settings\"} onClick={toggleSettings}/>\n                            </ButtonGroup>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"centers\">\n                    {content}\n                </div>\n            </div>\n            <Settings isOpen={isSettingsOpen} setIsOpen={setSettingsOpen}/>\n        </div>\n    )\n}","import { Button, Classes, H1, H3, TagInput } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React from \"react\";\nimport \"./_home.scss\"\n\n\nexport function Home() {\n    return (\n        <div id=\"home\">\n            <div className=\"home-container\">\n\t\t\t\t<div className=\"home-content\">\n\t\t\t\t\t<H1 className=\"home-title\">Find-a-CoWIN</H1>\n\t\t\t\t\t<span>A slot finder/checker for the CoWIN vaccination platform</span>\n\t\t\t\t\t<span>built using the CoWIN Public API.</span>\n\t\t\t\t\t<div className=\"home-links\">\n\t\t\t\t\t\t<a href=\"https://faraaz.tech/contact\">\n\t\t\t\t\t\t\t<Tooltip2 content={\"Get in touch\"} position={\"bottom\"}>\n\t\t\t\t\t\t\t\t<Button className={Classes.MINIMAL} icon=\"user\" text=\"faraaz.tech\" />\n\t\t\t\t\t\t\t</Tooltip2>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"https://github.com/faraazb/find-a-cowin\">\n\t\t\t\t\t\t\t<Tooltip2 content={\"Check out the source code\"} position=\"bottom\">\n\t\t\t\t\t\t\t\t<Button className={Classes.MINIMAL} icon=\"git-branch\" text=\"GitHub\" />\n\t\t\t\t\t\t\t</Tooltip2>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<H3 className=\"home-help-title\">Help regarding usage</H3>\n\t\t\t\t\t<div className=\"home-help\"> \n\t\t\t\t\t\t<table class=\"bp3-html-table bp3-html-table-bordered query-table\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Query</th>\n\t\t\t\t\t\t\t\t<th>Answer</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>Nothing happens when I type in the search bar..</td>\n\t\t\t\t\t\t\t\t<td>Press enter key! This is so that you can use multiple keywords. \n\t\t\t\t\t\t\t\t\tFor e.g. <TagInput values={[\"Andheri\", \"Borivali\"]}/> to get all the centers \n\t\t\t\t\t\t\t\t\tthat match for <b>either</b> Andheri or Borivali.</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>What does the refresh button do?</td>\n\t\t\t\t\t\t\t\t<td>It fetches the data again, without refreshing the page or resetting your filters.</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>Where are starred centers saved?</td>\n\t\t\t\t\t\t\t\t<td>These are stored in your browser's local storage and cannot sync across devices.</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>What does auto-refresh under Settings do?</td>\n\t\t\t\t\t\t\t\t<td>It regularly fetches new data for the selected district at the selected interval.</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n            </div>\n        </div>\n    )\n}","import { Button, Classes, H1 } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./_four-o-four.scss\"\n\nexport function FourOFour() {\n    return (\n        <div id=\"four-o-four\">\n            <div className=\"four-o-four-container\">\n\t\t\t\t<div className=\"four-o-four-content\">\n\t\t\t\t\t<H1 className=\"four-o-four-title big\">404</H1>\n                    <H1 className=\"four-o-four-title\">Not Found</H1>\n\t\t\t\t\t<span>Please visit any of the below links.</span>\n\t\t\t\t\t<div className=\"four-o-four-links\">\n\t\t\t\t\t\t<NavLink to=\"/\">\n                            <Button className={Classes.MINIMAL} icon=\"search\" text=\"Slot Finder\" />\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t\t<NavLink to=\"/about\">\n                            <Button className={Classes.MINIMAL} icon=\"info-sign\" text=\"About\" />\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n            </div>\n        </div>\n    );\n}\n","import React, {useEffect} from \"react\";\nimport {Button, H3, Intent, Spinner} from \"@blueprintjs/core\";\nimport \"./_starred-centers.scss\";\nimport {NavLink} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {resetStarredCenters, selectStarredCenters} from \"./starredCentersSlice\";\nimport {fetchCalendarByCenter, selectCalendarByCenter} from \"../cowin/cowinSlice\";\nimport {formatDate} from \"../../utils/DateUtilities\";\nimport {CenterCard} from \"../finder/Center\";\n\nexport const StarredCenters = () => {\n    const dispatch = useDispatch();\n    const initializeStarred = !localStorage.getItem(\"starred\");\n    const starred = useSelector(selectStarredCenters);\n    const centers = useSelector(selectCalendarByCenter);\n    const fetchStatus = useSelector((state) => state.cowin.status.calendarByCenter);\n\n    useEffect(() => {\n        if (initializeStarred) {\n            dispatch(resetStarredCenters());\n        }\n    })\n\n    useEffect(() => {\n        let date = new Date();\n        date = formatDate(date, '-');\n        console.log(fetchStatus)\n        for (let centerId of starred) {\n            if (fetchStatus[centerId] === \"idle\") {\n                dispatch(fetchCalendarByCenter({centerId: centerId, date: date}))\n            }\n        }\n    }, [starred, fetchStatus, dispatch]);\n\n    const getCenterContent = (centerId) => {\n        let content;\n        if (fetchStatus[centerId] === \"idle\") {\n            let date = new Date();\n            date = formatDate(date, '-');\n            dispatch(fetchCalendarByCenter({centerId: centerId, date: date}))\n            content = <CenterCard key={centerId} center={null} loading={true}/>\n        }\n        else if (fetchStatus[centerId] === \"loading\") {\n            content = <Spinner className={\"centers-loading-spinner\"} intent={Intent.PRIMARY} size={50} />\n        }\n        else if (fetchStatus[centerId] === \"succeeded\") {\n            let center = centers[centerId]\n            content = <CenterCard key={centerId} center={center} />\n        }\n        return content;\n    }\n\n    return (\n        <div className=\"starred-centers\">\n            <div className=\"header-container\">\n                <div className=\"header\">\n                    <NavLink to={\"/\"}>\n                        <Button icon={\"arrow-left\"} minimal={true}/>\n                    </NavLink>\n                    <H3 className=\"heading\">\n                        Starred Centers\n                    </H3>\n                </div>\n            </div>\n            <div className=\"centers\">\n                {\n                    starred.length === 0 && <div className=\"bp3-callout bp3-intent-warning\">\n                        <h4 className=\"bp3-heading\">\n                            No starred centers!\n                        </h4>\n                        Mark centers as starred using the <Button small={true} outlined={true}\n                                                                  icon={\"star\"} text={\"Star\"}/> button.\n                    </div>\n                }\n                {\n                    starred.length > 0 && starred.map((centerId, _id) => (\n                        getCenterContent(centerId)\n                    ))\n                }\n            </div>\n        </div>\n    )\n}","import './_app.scss';\nimport React, {useEffect, useState} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport { resetSettings } from './features/settings/settingsSlice';\nimport {Finder} from \"./features/finder/Finder\";\nimport {BrowserRouter, NavLink, Route, Switch} from \"react-router-dom\";\nimport {FocusStyleManager, Alignment, Button, Classes, Navbar, NavbarDivider, NavbarGroup, \n    NavbarHeading} from \"@blueprintjs/core\";\nimport { Home } from './features/home/Home';\nimport { FourOFour } from './features/FourOFour';\nimport {StarredCenters} from \"./features/starred-centers/StarredCenters\";\nimport { Position, Toaster } from \"@blueprintjs/core\";\n\n/** Singleton toaster instance. */\nexport const AppToaster = Toaster.create({\n    className: \"app-toaster\",\n    position: Position.TOP,\n});\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nfunction App() {\n    const dispatch = useDispatch();\n    const initializeSettings = !localStorage.getItem('SETTINGS')\n\n    const switchTheme = () => {\n        const div = document.getElementById(\"app\");\n        if (div.classList.contains(\"bp3-dark\")) {\n            div.classList.remove(\"bp3-dark\");\n            setThemeButton({name: \"Dark Theme\", icon: \"moon\"});\n        }\n        else if (!div.classList.contains(\"bp3-dark\")) {\n            div.classList.add(\"bp3-dark\");\n            setThemeButton({name: \"Light Theme\", icon: \"flash\"});\n        }\n    }\n\n    const useThemeDetector = () => {\n        const getCurrentTheme = () => window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n        const [isDarkTheme, setIsDarkTheme] = useState(getCurrentTheme());\n\n        const mqListener = (e => {\n            setIsDarkTheme(e.matches);\n        });\n        \n        useEffect(() => {\n          const darkThemeMq = window.matchMedia(\"(prefers-color-scheme: dark)\");\n          darkThemeMq.addEventListener(\"change\", mqListener);\n          return () => darkThemeMq.removeEventListener(\"change\", mqListener);\n        }, []);\n        return isDarkTheme;\n    }\n\n    const isDarkTheme = useThemeDetector()\n    const [themeButton, setThemeButton] = useState(\n        {\n            name: isDarkTheme ? \"Light Theme\" : \"Dark Theme\", \n            icon: isDarkTheme ? \"flash\" : \"moon\"\n        }\n    );\n\n    useEffect(() => {\n        if (isDarkTheme) {\n            const div = document.getElementById(\"app\");\n            div.classList.add(\"bp3-dark\");\n        }\n    }, [isDarkTheme])\n\n    useEffect(() => {\n        if (initializeSettings) {\n            console.log(\"Resetting settings\")\n            dispatch(resetSettings());\n        }\n    });\n\n    return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div id=\"app\">\n            <Navbar>\n                <NavbarGroup align={Alignment.LEFT}>\n                    <NavLink to=\"/\" id=\"find-a-cowin\">\n                        <NavbarHeading className=\"navigation-header\">\n                            <span className=\"bp3-heading\">Find-a-CoWIN</span>\n                        </NavbarHeading>\n                    </NavLink>\n                    <NavbarDivider />\n                    <NavLink to=\"/about\">\n                        <Button className={Classes.MINIMAL} icon=\"info-sign\" text=\"About\" />\n                    </NavLink>\n                </NavbarGroup>\n                <NavbarGroup align={Alignment.RIGHT}>\n                    <Button\n                        className={Classes.MINIMAL}\n                        icon={themeButton.icon}\n                        text={themeButton.name}\n                        onClick={switchTheme}\n                    />\n                </NavbarGroup>\n            </Navbar>\n            <div className=\"app-route\">\n                <Switch>\n                    <Route path=\"/starred\" exact={true}>\n                        <StarredCenters />\n                    </Route>\n\n                    <Route path=\"/about\" exact={true}>\n                        <Home />\n                    </Route>\n\n                    <Route exact path=\"/\">\n                        <Finder />\n                    </Route>\n\n                    <Route path=\"*\">\n                        <FourOFour />\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n    </BrowserRouter>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport cowinReducer from \"../features/cowin/cowinSlice\";\nimport settingsReducer from \"../features/settings/settingsSlice\";\nimport starredCentersReducer from \"../features/starred-centers/starredCentersSlice\"\n\nexport const store = configureStore({\n    reducer: {\n        cowin: cowinReducer,\n        settings: settingsReducer,\n        starredCenters: starredCentersReducer\n    },\n});","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from \"./app/store\";\nimport {Provider} from \"react-redux\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}