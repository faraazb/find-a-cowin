{"version":3,"sources":["features/settings/settingsSlice.js","features/finder/filters/filters.js","features/finder/sorting/sorting.js","features/cowin/cowinSlice.js","features/finder/Session.jsx","features/finder/Center.jsx","features/finder/Selectors.jsx","features/finder/filters/FeeTypeFilters.jsx","utils/DateUtilities.js","features/settings/Settings.jsx","features/finder/filters/FilterPopover.jsx","features/finder/Finder.jsx","features/home/Home.jsx","App.jsx","app/store.js","reportWebVitals.js","index.js"],"names":["settingsMap","defaultSettings","initialState","calendarByDistrictView","localStorage","getItem","calendarByDistrictAutoRefresh","calendarByDistrictAutoRefreshInterval","parseInt","settingsSlice","createSlice","name","reducers","resetSettings","state","action","setItem","setCalendarByDistrictView","viewName","payload","setCalendarByDistrictAutoRefreshInterval","interval","removeItem","toString","actions","isFree","centers","filter","center","fee_type","isPaid","byVaccine","vaccines","filteredCenters","some","session","includes","vaccine","sessions","newCenters","forEach","newCenter","clone","push","byKeyword","keywords","target","center_id","address","block_name","join","toLowerCase","el","indexOf","combineMultipleAgeConditions","ages","filterFields","joins","val1","length","byAgeCategory","categories","values","eighteenAbove","eighteenFortyFour","fortyFiveAbove","min","max","undefined","byCenterTotalDoses","sortOrder","orderBy","sumBy","available_capacity","fetchCalendarByDistrict","createAsyncThunk","a","districtId","date","axios","get","response","data","fetchStates","fetchDistricts","stateId","fetchVaccinationReports","fetchPublicReports","cowinSlice","states","districts","selected","stateEnt","stateName","districtEnt","districtName","calendarByDistrict","vaccinationReports","publicReports","status","error","filters","feeType","covaxin","checked","covishield","sputnik","minAge","maxAge","sort","doses","totalDoses","resetDistrictStore","resetCalendarByDistrictStore","setSelectedState","setSelectedDistrict","setFeeFilter","typeSelected","setKeywordFilter","setVaccineFilter","value","setAgeFilter","age","extraReducers","pending","fulfilled","rejected","message","selectKeywordFilter","cowin","selectFeeFilters","selectVaccineFilter","selectAgeFilter","selectAllStates","selectAllDistricts","selectSelectedState","selectSelectedDistrict","selectFilteredData","createSelector","feeFilters","transformations","filterIsFree","filterIsPaid","selectedVaccines","pickBy","nextVaccines","Object","partialRight","filterByVaccine","filterByAgeCategory","filterByKeyword","sortByCenterTotalDoses","flow","SessionTags","props","map","id","className","intent","Intent","PRIMARY","icon","available_capacity_dose1","available_capacity_dose2","SessionTable","min_age_limit","max_age_limit","WARNING","SUCCESS","CenterCard","content","viewType","useSelector","settings","vaccine_fees","vaccine_fee","fee","filterList","query","title","_index","exactMatch","normalizedTitle","normalizedQuery","StateSelector","setState","selectedState","items","popoverProps","popoverClassName","minimal","inputValueRenderer","state_name","itemRenderer","handleClick","_modifiers","_query","text","onClick","state_id","onItemSelect","_event","itemPredicate","index","noResults","disabled","fill","rightIcon","DistrictSelector","setDistrict","selectedDistrict","district","district_name","district_id","StateSelector2","React","memo","DistrictSelector2","FeeTypeFilters","dispatch","useDispatch","feeFilter","alignmentVertical","feeTypeChange","event","feeTypeVal","vertical","label","onChange","alignIndicator","Alignment","RIGHT","formatDate","separator","formatId","month","getMonth","day","getDate","year","getFullYear","yearShort","substr","Settings","isOpen","setIsOpen","view","autoRefresh","autoRefreshInt","nickDisplayMap","handleClose","viewOptions","refreshOptions","canOutsideClickClose","onClose","usePortal","option","FilterPopover","useState","vaccineFilter","ageCategoryChecked","handleVaccineChange","handleAgeCategoryChange","DANGER","Classes","POPOVER2_DISMISS","POPOVER2_CONTENT_SIZING","interactionKind","onInteraction","placement","AvailableSlots","calendarFetchStatus","searchInputValues","isSettingsOpen","setSettingsOpen","autoRefreshInterval","statesFetchStatus","intervalRef","useRef","refreshData","Date","console","log","toLocaleTimeString","useEffect","current","clearInterval","intervalId","setInterval","description","size","clearButton","leftIcon","placeholder","rightElement","Home","href","position","MINIMAL","class","FocusStyleManager","onlyShowFocusOnTabs","App","initializeSettings","isDarkTheme","window","matchMedia","matches","setIsDarkTheme","mqListener","e","darkThemeMq","addEventListener","removeEventListener","useThemeDetector","themeButton","setThemeButton","document","getElementById","classList","add","align","LEFT","to","div","contains","remove","path","store","configureStore","reducer","cowinReducer","settingsReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.63167544.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\n\n\nconst settingsMap = {\n    calendarByDistrictView: \"SETTINGS_CALENDARBYDIST_VIEW\",\n    calendarByDistrictAutoRefresh: \"SETTINGS_CALENDARBYDIST_AR\",\n    calendarByDistrictAutoRefreshInterval: \"SETTINGS_CALENDARBYDIST_AR_INT\"\n}\n\nconst defaultSettings = {\n    calendarByDistrictView: \"table\",\n    calendarByDistrictAutoRefresh: false,\n    calendarByDistrictAutoRefreshInterval: null\n\n}\n\nconst initialState = {\n    calendarByDistrictView: localStorage.getItem(settingsMap.calendarByDistrictView) || defaultSettings.calendarByDistrictView,\n    calendarByDistrictAutoRefresh: localStorage.getItem(settingsMap.calendarByDistrictAutoRefresh) === \"true\"\n        || defaultSettings.calendarByDistrictAutoRefresh,\n    calendarByDistrictAutoRefreshInterval: parseInt(localStorage.getItem(settingsMap.calendarByDistrictAutoRefreshInterval))\n        || defaultSettings.calendarByDistrictAutoRefreshInterval\n}\n\n\nexport const settingsSlice = createSlice({\n    name: 'settings',\n    initialState,\n    reducers: {\n        resetSettings: (state, action) => {\n            localStorage.setItem('SETTINGS', 'true');\n            localStorage.setItem(settingsMap.calendarByDistrictView, defaultSettings.calendarByDistrictView);\n            localStorage.setItem(settingsMap.calendarByDistrictAutoRefresh,\n                defaultSettings.calendarByDistrictAutoRefresh);\n            localStorage.setItem(settingsMap.calendarByDistrictAutoRefreshInterval,\n                defaultSettings.calendarByDistrictAutoRefreshInterval)\n            state.calendarByDistrictView = defaultSettings.calendarByDistrictView;\n            state.calendarByDistrictAutoRefresh = defaultSettings.calendarByDistrictAutoRefresh;\n            state.calendarByDistrictAutoRefreshInterval = defaultSettings.calendarByDistrictAutoRefreshInterval;\n        },\n        setCalendarByDistrictView: (state, action) => {\n            const { viewName } = action.payload;\n            state.calendarByDistrictView = viewName;\n            localStorage.setItem(settingsMap.calendarByDistrictView, viewName);\n        },\n        setCalendarByDistrictAutoRefreshInterval: (state, action) => {\n            const { interval } = action.payload;\n            if (interval === null) {\n                state.calendarByDistrictAutoRefresh = false;\n                state.calendarByDistrictAutoRefreshInterval = null;\n                localStorage.setItem('SETTINGS_CALENDARBYDIST_AR', 'false')\n                localStorage.removeItem('SETTINGS_CALENDARBYDIST_AR_INT')\n            }\n            else {\n                state.calendarByDistrictAutoRefresh = true;\n                state.calendarByDistrictAutoRefreshInterval = interval;\n                localStorage.setItem('SETTINGS_CALENDARBYDIST_AR', 'true')\n                localStorage.setItem('SETTINGS_CALENDARBYDIST_AR_INT', interval.toString())\n            }\n        }\n    }\n});\n\nexport const {\n    resetSettings,\n    setCalendarByDistrictView,\n    setCalendarByDistrictAutoRefreshInterval\n} = settingsSlice.actions;\n\nexport const selectSettings = (state) => state.settings;\n\nexport default settingsSlice.reducer;\n","import { filter, some, clone } from \"lodash/fp\";\n\nexport function isFree(centers) {\n    return filter(center => center.fee_type === \"Free\", centers);\n}\n\nexport function isPaid(centers) {\n    return filter(center => center.fee_type === \"Paid\", centers);\n}\n\nexport function byVaccine(centers, vaccines) {\n    let filteredCenters = filter(center => {\n        return some(session => vaccines.includes(session.vaccine), center.sessions);\n    }, centers);\n    let newCenters = []\n    filteredCenters.forEach(center => {\n        let newCenter = clone(center)\n        newCenter.sessions = filter(session => vaccines.includes(session.vaccine), center.sessions);\n        newCenters.push(newCenter)\n    })\n    return newCenters;\n}\n\nexport function byKeyword(centers, keywords) {\n    return filter(center => {\n        const target = [\n            center.center_id.toString(),\n            center.name,\n            center.address,\n            center.block_name\n        ].join(' ').toLowerCase();\n        return some(el => target.indexOf(el.toLowerCase()) >= 0, keywords)\n    }, centers);\n}\n\n\nexport function byAge(centers, ages) {\n    const {minAge, maxAge} = ages\n    let filteredCenters = filter(center => {\n        return some(session => {\n            if (minAge && maxAge) {\n                return session.min_age_limit === minAge && session.max_age_limit === maxAge;\n            }\n            else if (minAge && !maxAge) {\n                return session.min_age_limit === minAge;\n            }\n        }, center.sessions);\n    }, centers);\n    let newCenters = []\n    filteredCenters.forEach(center => {\n        let newCenter = clone(center)\n        newCenter.sessions = filter(session => {\n            if (minAge && maxAge) {\n                return session.min_age_limit === minAge && session.max_age_limit === maxAge;\n            }\n            else if (minAge && !maxAge) {\n                return session.min_age_limit === minAge;\n            }\n        }, center.sessions);\n        newCenters.push(newCenter)\n    })\n    return newCenters;\n}\n\n/* \nA terribly specific function for helping the byAgeCategory filter function.\nWorks for now, since there are only 3 age categories, hence only 6+1 combinaions are possible.\nTakes an array of age values, array containing \"min_age\" and \"max_age\" and then uses\nthe join array to determine whether to AND (join: true) or to OR (join: false) the conditions.\n*/\nfunction combineMultipleAgeConditions(session, ages, filterFields, joins) {\n    let val1 = joins[0] ? \n            session[filterFields[0]] === ages[0] && session[filterFields[1]] === ages[1] : \n            (session[filterFields[0]] === ages[0] || session[filterFields[1]] === ages[1]);\n    if (ages.length === 2) {\n        return val1;\n    }\n    // Currently, three conditional checks are only required when 18+ and 45+ is checked\n    // to filter out the 18-44 slots. Hence, note that the statements are using the unequal sign.\n    if (ages.length === 3) {\n        return joins[1] ?\n            val1 && session[filterFields[2]] !== ages[2] :\n            val1 || session[filterFields[2]] !== ages[2]\n    }\n    return false;\n}\n\n/* \nFilters age by category, the if-else ladder determines what minimum and maximum values\nto use for filtering depending on the categories selected (values array). \nSince multiple, disconnected ranges like 18+ and 45+ can be checked by the user, a helper \nfunction which can take multiple min. or max. values and other parameters is used.\n*/\nexport function byAgeCategory(centers, categories) {\n    const {eighteenAbove, eighteenFortyFour, fortyFiveAbove} = categories;\n    let values, filterFields, joins;\n    let min = \"min_age_limit\";\n    let max = \"max_age_limit\";\n    if (eighteenAbove === eighteenFortyFour && eighteenAbove === fortyFiveAbove) {\n        return centers;\n    }\n    if (eighteenAbove && eighteenFortyFour) {\n        values = [18, 44];\n        filterFields = [min, max];\n        joins = [false];\n    }\n    else if (eighteenAbove && fortyFiveAbove) {\n        // filter centers with:\n        // (min = 18 OR min = 45) AND max != 44\n        // a false in joins means OR, a true means AND\n        // filter centers with: \n        // (filterFields[0] = values[0] {joins[0]} filterFields[1] = values[1]) AND filterFields[2] != values[2]\n        values = [18, 45, 44];\n        filterFields = [min, min, max];\n        joins = [false, true];\n    }\n    else if (eighteenFortyFour && fortyFiveAbove) {\n        values = [45, 44];\n        filterFields = [min, max];\n        joins = [false];\n    }\n    else if (eighteenAbove) {\n        values = [18, undefined];\n        filterFields = [min, max];\n        joins = [true];\n    }\n    else if (eighteenFortyFour) {\n        values = [18, 44];\n        filterFields = [min, max];\n        joins = [true];\n    }\n    else if (fortyFiveAbove) {\n        values = [45, undefined];\n        filterFields = [min, max];\n        joins = [true];\n    }\n    else {\n        return centers;\n    }\n\n    let filteredCenters = filter(center => {\n        return some(session => {\n            return combineMultipleAgeConditions(session, values, filterFields, joins);\n        }, center.sessions);\n    }, centers);\n    let newCenters = []\n    filteredCenters.forEach(center => {\n        let newCenter = clone(center)\n        newCenter.sessions = filter(session => {\n            return combineMultipleAgeConditions(session, values, filterFields, joins);\n        }, center.sessions);\n        newCenters.push(newCenter);\n    })\n    return newCenters;\n}","import { clone, orderBy, sumBy } from \"lodash/fp\"\n\nexport function byCenterTotalDoses(centers, sortOrder) {\n    return orderBy(center => sumBy(session => session.available_capacity, center.sessions), sortOrder, centers);\n}\n\nexport function bySessionDoses(centers, sortOrder) {\n    let nextCenters = [];\n    centers.forEach(center => {\n        let nextCenter = clone(center)\n        nextCenter.sessions = orderBy(\n            ['available_capacity_dose1', 'available_capacity_dose2'], \n            sortOrder, \n            center.sessions\n        )\n        nextCenters.push(nextCenter);\n    });\n    return nextCenters;\n}\n","import {createAsyncThunk, createSelector, createSlice} from \"@reduxjs/toolkit\";\nimport axios from \"axios\"\nimport { flow, partialRight, pickBy } from \"lodash/fp\";\nimport {\n\tbyAgeCategory as filterByAgeCategory, \n    byKeyword as filterByKeyword, \n    byVaccine as filterByVaccine, \n    isFree as filterIsFree, \n    isPaid as filterIsPaid \n} from \"../finder/filters/filters\";\nimport { \n\tbyCenterTotalDoses as sortByCenterTotalDoses \n} from \"../finder/sorting/sorting\";\n\nconst initialState = {\n    states: [],\n    districts: [],\n    selected: {\n        stateEnt: {\n            stateName: \"Select a State\",\n            stateId: null\n        },\n        districtEnt: {\n            districtName: \"Select a District\",\n            districtId: null\n        },\n    },\n    calendarByDistrict: {\n        centers: []\n    },\n    vaccinationReports: {},\n    publicReports: {},\n    status: {\n        states: 'idle',\n        districts: 'idle',\n        calendarByDistrict: 'idle',\n        vaccinationReports: 'idle',\n        publicReports: 'idle'\n    },\n    error: {\n        states: null,\n        districts: null,\n        calendarByDistrict: null,\n        vaccinationReports: null,\n        publicReports: null\n    },\n    filters: {\n        keywords: [],\n        feeType: {\n            \"Free\": true,\n            \"Paid\": true\n        },\n        // vaccines: {\n        //     \"COVAXIN\": false,\n        //     \"COVISHIELD\": true,\n        //     \"SPUTNIK V\": false\n        // },\n        vaccines: {\n            covaxin: {\n                name: \"COVAXIN\",\n                checked: true\n            },\n            covishield: {\n                name: \"COVISHIELD\",\n                checked: true\n            },\n            sputnik: {\n                name: \"SPUTNIK V\",\n                checked: true\n            }\n        },\n        ages: {\n            minAge: null,\n            maxAge: null,\n\t\t\teighteenAbove: true,\n\t\t\teighteenFortyFour: true,\n\t\t\tfortyFiveAbove: true\n        }\n    },\n    sort: {\n        session: {\n            doses: ['desc', 'desc'],\n        },\n        center: {\n\t\t\ttotalDoses: 'desc'\n        }\n    }\n}\n\nexport const fetchCalendarByDistrict = createAsyncThunk('cowin/calendarByDistrict',\n    async ({districtId, date}) => {\n    const response = await axios.get(\n        `https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict?district_id=\n            ${districtId}&date=${date}`);\n    return response.data;\n});\n\nexport const fetchStates = createAsyncThunk('cowin/fetchStates',\n    async () => {\n    const response = await axios.get(\n        `https://cdn-api.co-vin.in/api/v2/admin/location/states`);\n    return response.data;\n});\n\nexport const fetchDistricts = createAsyncThunk('cowin/fetchDistricts',\n    async ({stateId}) => {\n    const response = await axios.get(\n        `https://cdn-api.co-vin.in/api/v2/admin/location/districts/${stateId}`);\n    return response.data;\n});\n\nexport const fetchVaccinationReports = createAsyncThunk('cowin/fetchVaccinationReports',\n    async ({stateId, districtId, date}) => {\n        const response = await axios.get(`https://api.cowin.gov.in/api/v1/reports/v2/getVacPublicReports?\n        state_id=${stateId}&district_id=${districtId}&date=${date}`);\n        return response.data\n    })\n\nexport const fetchPublicReports = createAsyncThunk('cowin/fetchPublicReports',\n    async ({stateId, districtId, date}) => {\n        const response = await axios.get(`https://api.cowin.gov.in/api/v1/reports/v2/getPublicReports?\n        state_id=${stateId}&district_id=${districtId}&date=${date}`);\n        return response.data\n    })\n\nexport const cowinSlice = createSlice({\n    name: 'cowin',\n    initialState,\n    reducers: {\n        resetDistrictStore: (state) => {\n            state.districts = [];\n        },\n        resetCalendarByDistrictStore: (state) => {\n            state.calendarByDistrict = { centers: [] };\n        },\n        setSelectedState: (state, action) => {\n            const { stateName } = action.payload;\n            state.selected.stateEnt.stateName = stateName;\n            if (action.payload.stateId) {\n                state.selected.stateEnt.stateId = action.payload.stateId;\n            }\n            else {\n                state.selected.stateEnt.stateId = null;\n            }\n        },\n        setSelectedDistrict: (state, action) => {\n            const { districtName } = action.payload;\n            state.selected.districtEnt.districtName = districtName;\n            if (action.payload.districtId) {\n                state.selected.districtEnt.districtId = action.payload.districtId;\n            }\n            else {\n                state.selected.districtEnt.districtId = null\n            }\n        },\n        setFeeFilter: (state, action) => {\n            const { feeType, typeSelected } = action.payload;\n            state.filters.feeType[feeType] = typeSelected;\n        },\n        setKeywordFilter: (state, action) => {\n            state.filters.keywords = action.payload;\n        },\n        setVaccineFilter: (state, action) => {\n            const { vaccine, value } = action.payload;\n            switch (vaccine) {\n                case \"COVAXIN\":\n                    state.filters.vaccines.covaxin.checked = value;\n                    break;\n                case \"COVISHIELD\":\n                    state.filters.vaccines.covishield.checked = value;\n                    break;\n                case \"SPUTNIK V\":\n                    state.filters.vaccines.sputnik.checked = value;\n                    break;\n                default:\n                    break;\n            }\n        },\n\t\t// setAgeFilter: (state, action) => {\n\t\t// \tconst { minAge, maxAge } = action.payload;\n\t\t// \tstate.filters.ages.minAge = minAge;\n\t\t// \tstate.filters.ages.maxAge = maxAge;\n\t\t// }\n\t\tsetAgeFilter: (state, action) => {\n\t\t\tconst { age, value } = action.payload;\n\t\t\tswitch (age) {\n\t\t\t\tcase \"age-18-above\":\n\t\t\t\t\tstate.filters.ages.eighteenAbove = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"age-18-44\":\n\t\t\t\t\tstate.filters.ages.eighteenFortyFour = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"age-45-above\":\n\t\t\t\t\tstate.filters.ages.fortyFiveAbove = value;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n    },\n    extraReducers: {\n        [fetchCalendarByDistrict.pending]: (state) => {\n            state.status.calendarByDistrict = 'loading';\n        },\n        [fetchCalendarByDistrict.fulfilled]: (state, action) => {\n            state.status.calendarByDistrict = 'succeeded';\n            state.calendarByDistrict = action.payload;\n        },\n        [fetchCalendarByDistrict.rejected]: (state, action) => {\n            state.status.calendarByDistrict = 'failed';\n            state.error.calendarByDistrict = action.error.message;\n        },\n        [fetchStates.pending]: (state) => {\n            state.status.states = 'loading';\n        },\n        [fetchStates.fulfilled]: (state, action) => {\n            state.status.states = 'succeeded';\n            //Here we select the slates key from the response\n            // Response: {\n            //  states: []\n            // }\n            state.states = action.payload.states;\n        },\n        [fetchStates.rejected]: (state, action) => {\n            state.status.states = 'failed';\n            state.error.states = action.error.message;\n        },\n        [fetchDistricts.pending]: (state) => {\n            state.status.districts = 'loading';\n        },\n        [fetchDistricts.fulfilled]: (state, action) => {\n            state.status.districts = 'succeeded';\n            state.districts = action.payload.districts;\n        },\n        [fetchDistricts.rejected]: (state, action) => {\n            state.status.districts = 'failed';\n            state.error.districts = action.error.message;\n        },\n        [fetchVaccinationReports.fulfilled]: (state, action) => {\n            state.status.vaccinationReports = 'succeeded';\n            state.error.vaccinationReports = null;\n            state.vaccinationReports = action.payload;\n        },\n        [fetchVaccinationReports.rejected]: (state, action) => {\n            state.status.vaccinationReports = 'failed';\n            state.error.vaccinationReports = action.error.message;\n        },\n        [fetchPublicReports.fulfilled]: (state, action) => {\n            state.status.publicReports = 'succeeded';\n            state.error.publicReports = null;\n            state.publicReports = action.payload;\n        },\n        [fetchPublicReports.rejected]: (state, action) => {\n            state.status.publicReports = 'failed';\n            state.error.publicReports = action.error.message;\n        }\n    },\n});\n\n\n\nexport const { resetDistrictStore,\n    resetCalendarByDistrictStore,\n    setKeywordFilter,\n    setFeeFilter,\n    setVaccineFilter,\n\tsetAgeFilter,\n    setSelectedState,\n    setSelectedDistrict\n} = cowinSlice.actions;\n\nexport const selectCalendarByDistrict = (state) => state.cowin.calendarByDistrict.centers;\n\nexport const selectKeywordFilter = (state) => state.cowin.filters.keywords;\nexport const selectFeeFilters = (state) => state.cowin.filters.feeType;\nexport const selectVaccineFilter = (state) => state.cowin.filters.vaccines;\nexport const selectAgeFilter = (state) => state.cowin.filters.ages;\n\nexport const selectAllStates = (state) => state.cowin.states;\nexport const selectAllDistricts = (state) => state.cowin.districts;\nexport const selectSelectedState = (state) => state.cowin.selected.stateEnt;\nexport const selectSelectedDistrict = (state) => state.cowin.selected.districtEnt;\n\nexport const selectVaxReportsLastThirtyDays = (state) => state.cowin.vaccinationReports.last30DaysVaccination;\n\nexport const selectPublicReports = (state) => state.cowin.publicReports;\nexport const selectPublicReportsBeneficiaries = (state) => state.cowin.publicReports.getBeneficiariesGroupBy;\n\nexport const selectFilteredData = createSelector(\n    selectCalendarByDistrict,\n    selectFeeFilters,\n    selectKeywordFilter,\n    selectVaccineFilter,\n    selectAgeFilter,\n    (state) => state.cowin.sort,\n    (centers, feeFilters, keywords, vaccines, ages, sort) => {\n        let transformations = []\n        if (feeFilters[\"Free\"] !== feeFilters[\"Paid\"]) {\n            if (feeFilters[\"Free\"]) {\n                transformations.push(filterIsFree);\n            }\n            else if (feeFilters[\"Paid\"]) {\n                transformations.push(filterIsPaid);\n            }\n        }\n        // if (vaccines) {\n        //     let selectedVaccines = Object.keys(pickBy(vaccine => vaccine, vaccines));\n        //     console.log(selectedVaccines)\n        //     transformations.push(partialRight(filterByVaccine, [selectedVaccines]));\n        // }\n        if (vaccines) {\n            let selectedVaccines = pickBy(vaccine => vaccine.checked, vaccines);\n            let nextVaccines = [];\n            Object.values(selectedVaccines).forEach(vaccine => nextVaccines.push(vaccine.name));\n            if (nextVaccines.length > 0) {\n                transformations.push(partialRight(filterByVaccine, [nextVaccines]));\n            }\n        }\n\t\tif (ages) {\n\t\t\ttransformations.push(partialRight(filterByAgeCategory, [ages]))\n\t\t}\n        if (keywords.length > 0) {\n            transformations.push(partialRight(filterByKeyword, [keywords]));\n        }\n\t\t// TODO: vaccine price sorting\n        // Implementing a drag-drop interface with the ability to rank the sorts would be amazing.\n\t\ttransformations.push(partialRight(sortByCenterTotalDoses, [[sort.center.totalDoses]]));\n\t\t// Sort slots within a center by dose count\n        // transformations.push(partialRight(sortByDosesWithinCenter, [sort.session.doses]));\n        // console.log(filters)\n        return flow(transformations)(centers);\n    }\n)\n\nexport default cowinSlice.reducer;\n","import {Icon, Intent, Tag} from \"@blueprintjs/core\";\nimport React from \"react\";\n\n/*\n* Session uses the Blueprintjs {@link https://blueprintjs.com/docs/#core/components/tag Tag} component to render a\n* session's details\n*\n* */\n\nfunction SessionTags(props) {\n    const { sessions } = props;\n\n    return (\n        <>\n            {sessions && sessions.map((session, id) => (\n                <Tag key={id} className=\"session\" intent={Intent.PRIMARY} >\n                    <Icon icon={\"calendar\"} />\n                    <span className=\"session-info\">{session.date}</span>\n                    <span className=\"session-info\">{session.vaccine}</span>\n                    <span className=\"session-info\">Dose 1: {session.available_capacity_dose1}</span>\n                    <span className=\"session-info\">Dose 2: {session.available_capacity_dose2}</span>\n                </Tag>\n            ))}\n        </>\n    )\n}\n\nfunction SessionTable(props) {\n    const { sessions } = props;\n\n    return (\n        <table className=\"bp3-html-table bp3-html-table-bordered bp3-html-table-condensed bp3-interactive sessions-table\">\n            <thead>\n            <tr>\n                <th>Date</th>\n                <th>Vaccine</th>\n                <th>Dose 1</th>\n                <th>Dose 2</th>\n                <th>Min. Age</th>\n                <th>Max. Age</th>\n            </tr>\n            </thead>\n            <tbody>\n            {sessions && sessions.map((session, id) => (\n                <tr key={id}>\n                    <td>\n                        {session.date}\n                    </td>\n                    <td>\n                        {session.vaccine}\n                    </td>\n                    <td>\n                        {session.available_capacity_dose1}\n                    </td>\n                    <td>\n                        {session.available_capacity_dose2}\n                    </td>\n                    <td>\n                        {session.min_age_limit || \"-\"}\n                    </td>\n                    <td>\n                        {session.max_age_limit || \"-\"}\n                    </td>\n                </tr>\n            ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport { SessionTable, SessionTags };","import { Intent, Tag } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { SessionTable, SessionTags } from \"./Session\";\nimport { useSelector } from \"react-redux\";\n\n/*\n* Defines the Blueprintjs Intent color to use with a particular fee type\n*\n* */\nconst feeType = {\n    \"Paid\": Intent.WARNING,\n    \"Free\": Intent.SUCCESS\n}\n\n/*\n* CenterCard component renders a center and its Cowin using the Session component. Currently, every session\n* is rendered a Tag, but it's not very good looking.\n*\n* */\nfunction CenterCard(props) {\n    const { center } = props;\n    const viewType = useSelector((state => state.settings.calendarByDistrictView));\n    // const viewTypeTable = viewType === \"table\";\n    // const viewTypeTags = viewType === \"tags\"\n\n    let content;\n    if (viewType === \"table\") {\n        content = <SessionTable sessions={center.sessions} />\n    }\n    else if (viewType === \"tags\") {\n        content = <SessionTags sessions={center.sessions} />\n    }\n\n    return (\n        <div key={center.center_id} className=\"center bp3-elevation-1\">\n            <div className=\"center-info-container\">\n                <span className=\"center-name\">{center.name}</span>\n                <Tag className=\"center-fee-type\" intent={feeType[center.fee_type]}>\n                    {center.fee_type}\n                </Tag>\n                {\n                    center.fee_type===\"Paid\" &&\n                        <div className=\"vaccine-fee-tags\">\n                            {center.vaccine_fees.map((vaccine_fee, id) => (\n                                <Tag key={id} className=\"fee-type\">\n                                    {vaccine_fee.vaccine}: ₹ {vaccine_fee.fee}\n                                </Tag>\n                            ))}\n                        </div>\n                }\n            </div>\n            <div className=\"center-info-container\">\n                <span className=\"center-info\">{center.address}</span>\n                <span className=\"center-info\">[{center.block_name}]</span>\n            </div>\n            <div className=\"sessions\">\n                {content}\n            </div>\n        </div>\n    )\n}\n\nexport { CenterCard };","import {Button, MenuItem} from \"@blueprintjs/core\";\nimport {Select} from \"@blueprintjs/select\";\nimport React from \"react\";\n\n/*\n* Simple filtering function, extracted here so that it doesn't have to repeated in both\n* State and District Selectors\n*\n* */\nconst filterList = (query, title, _index, exactMatch) => {\n    const normalizedTitle = title.toLowerCase();\n    const normalizedQuery = query.toLowerCase();\n\n    if (exactMatch) {\n        return normalizedTitle === normalizedQuery;\n    } else {\n        return normalizedTitle.indexOf(normalizedQuery) >= 0;\n    }\n}\n\n/*\n* StateSelector uses the {@link https://blueprintjs.com/docs/#select Blueprintjs Select} component,\n* provides a list of states to filter and choose from.\n* TODO Consider merging both State and District selectors and managing\n*  differences through props.\n*\n* */\nconst StateSelector = (props) => {\n    const { setState, selectedState, states } = props;\n    // const states = useSelector(selectAllStates);\n\n    // // Fetch states for StateSelector when it mounts\n    // useEffect(() => {\n    //     if (statesFetchStatus === \"idle\") {\n    //         dispatch(fetchStates());\n    //     }\n    // }, [statesFetchStatus, dispatch]);\n\n    const renderInputValue = (state) => state.state_name;\n\n    // Handle State selector value change\n    const handleValueChange = (state, _event) => {\n        setState(state);\n    }\n\n    // Render a Blueprintjs Menu Item for every state\n    const renderItem = (state, { handleClick, _modifiers, _query}) => {\n        return (\n            <MenuItem key={state.state_id} text={state.state_name} onClick={handleClick}/>\n        );\n    }\n\n    // Called by the {@link https://blueprintjs.com/docs/#select Blueprintjs Select} component whenever\n    // the query has a new input keyword. Select will provide query,\n    // the State item {state_name: string, state_id: string} the index and exactMatch.\n    const filterStates = (query, state, index, exactMatch) => {\n        return filterList(query, state.state_name, index, exactMatch)\n    }\n\n    return (\n        <div className=\"selector slot-toolbar-item\">\n            <Select\n                items={states}\n                popoverProps={{popoverClassName: \"selector-popover\", minimal: true}}\n                inputValueRenderer={renderInputValue}\n                itemRenderer={renderItem}\n                onItemSelect={handleValueChange}\n                itemPredicate={filterStates}\n                noResults={<MenuItem disabled={true} text=\"No results.\" />}\n            >\n                <Button fill={true} text={selectedState.stateName} rightIcon=\"caret-down\" />\n            </Select>\n        </div>\n    )\n}\n\n/*\n* DistrictSelector uses the {@link https://blueprintjs.com/docs/#select Blueprintjs Select} component,\n* provides a list of districts to filter and choose from.\n*\n* */\nconst DistrictSelector = (props) => {\n    const { setDistrict, selectedDistrict, districts } = props;\n    // const districts = useSelector(selectAllDistricts);\n\n    const renderDistrictInputValue = (district) => district.district_name;\n\n    const renderDistrictItem = (district, { handleClick, _modifiers, _query }) => {\n        return (\n            <MenuItem key={district.district_id} text={district.district_name} onClick={handleClick}/>\n        )\n    }\n\n    const districtSelected = (district, _event) => {\n        setDistrict(district);\n    }\n\n    // Called by the Blueprintjs Select component whenever the query has a new input keyword.\n    // Select will provide query, the State item {district_name: string, district_id: string},\n    // the index and exactMatch.\n    const filterDistricts = (query, district, index, exactMatch) => {\n        return filterList(query, district.district_name, index, exactMatch);\n    }\n\n    return (\n        <div className=\"selector slot-toolbar-item\">\n            <Select\n                items={districts}\n                popoverProps={{popoverClassName: \"selector-popover\", minimal: true}}\n                inputValueRenderer={renderDistrictInputValue}\n                itemRenderer={renderDistrictItem}\n                onItemSelect={districtSelected}\n                itemPredicate={filterDistricts}\n                noResults={<MenuItem disabled={true} text=\"No results.\" />}\n            >\n                <Button fill={true} text={selectedDistrict.districtName} rightIcon=\"caret-down\" />\n            </Select>\n        </div>\n    )\n}\n\nconst StateSelector2 = React.memo(StateSelector);\nconst DistrictSelector2 = React.memo(DistrictSelector);\n\nexport { StateSelector, StateSelector2, DistrictSelector, DistrictSelector2};\n","import {Alignment, Checkbox, ControlGroup} from \"@blueprintjs/core\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectFeeFilters, setFeeFilter} from \"../../cowin/cowinSlice\";\n\n/*\n* Free/Paid fee type filtering checkbox component.\n* It dispatches the setFeeFilter action whenever checkbox state changes.\n* See cowinSlice as to how the filtering works\n* */\nfunction FeeTypeFilters(props) {\n    const dispatch = useDispatch();\n    const feeFilter = useSelector(selectFeeFilters);\n    const { alignmentVertical } = props;\n\n    // @param {String} feeTypeVal Free or Paid\n    // Update feeFilter[feeTypeVal] state in store by NOT(current value)\n    // See cowinSlice for \"filter\" object structure\n    const feeTypeChange = (event, feeTypeVal) => {\n        dispatch(setFeeFilter({feeType: feeTypeVal, typeSelected: !feeFilter[feeTypeVal]}));\n    }\n\n    return (\n        <div className=\"fee-types\">\n            <ControlGroup\n                fill={true}\n                vertical={alignmentVertical}\n            >\n                <Checkbox\n                    className=\"fee-type-checkbox\"\n                    label={\"Free\"}\n                    checked={feeFilter[\"Free\"]}\n                    onChange={(event) => feeTypeChange(event, \"Free\")}\n                    alignIndicator={Alignment.RIGHT}\n                />\n                <Checkbox\n                    className=\"fee-type-checkbox\"\n                    label={\"Paid\"}\n                    checked={feeFilter[\"Paid\"]}\n                    onChange={(event) => feeTypeChange(event, \"Paid\")}\n                    alignIndicator={Alignment.RIGHT}\n                />\n            </ControlGroup>\n        </div>\n    )\n}\n\nexport { FeeTypeFilters };\n","/*\n* Returns the date in dd%mm%yy using the specified separator:%\n* @param {Date} d Date object\n* @param {String} separator Separator to use\n* */\nfunction formatDate(date, separator, formatId)  {\n    let month = date.getMonth();\n    let day = date.getDate().toString();\n    let year = date.getFullYear().toString();\n    let yearShort = year.substr(-2);\n    // month is zero-indexed\n    month = (month + 1).toString();\n    // Pad single digit month/dates with preceding 0\n    if (month.length === 1) {\n        month = \"0\" + month;\n    }\n    if (day.length === 1) {\n        day = \"0\" + day;\n    }\n    switch (formatId) {\n        case 1:\n            return [day, month, yearShort].join(separator);\n        case 2:\n            return [year, month, day].join(separator);\n        default:\n            return [day, month, yearShort].join(separator);\n    }\n}\n\nexport { formatDate };\n","import React from \"react\";\nimport {Button, Card, ControlGroup, Dialog, Icon, Switch} from \"@blueprintjs/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { setCalendarByDistrictAutoRefreshInterval, setCalendarByDistrictView} from \"./settingsSlice\";\nimport \"./_settings.scss\"\n\nfunction Settings(props) {\n    const dispatch = useDispatch();\n    const { isOpen, setIsOpen } = props;\n    const view = useSelector(state => state.settings.calendarByDistrictView);\n    const autoRefresh = useSelector(state => state.settings.calendarByDistrictAutoRefresh);\n    const autoRefreshInt = useSelector(state => state.settings.calendarByDistrictAutoRefreshInterval);\n\n    const nickDisplayMap = {\n        \"table\": \"Table\",\n        \"tags\": \"Tags\",\n        4000: \"4 Seconds\",\n        5000: \"5 Seconds\",\n        6000: \"6 Seconds\",\n        10000: \"10 Seconds\",\n    }\n\n    const handleClose = () => setIsOpen(false);\n\n    const handleViewTypeChange = (event) => {\n        // event.preventDefault();\n        dispatch(setCalendarByDistrictView({viewName: event.target.value}));\n    }\n\n    // viewOptions items must exactly be the same as the nicknames for the settings used in settingsSlice\n    const viewOptions = [\"tags\", \"table\"];\n\n    const refreshOptions = [4000, 5000, 6000, 10000]\n\n    const handleAutoRefreshChange = (event) => {\n        if (event.target.checked) {\n            dispatch(setCalendarByDistrictAutoRefreshInterval({interval: 5000}));\n        }\n        else {\n            dispatch(setCalendarByDistrictAutoRefreshInterval({interval: null}));\n        }\n    }\n\n    const handleAutoRefreshValueChange = (event) => {\n        dispatch(setCalendarByDistrictAutoRefreshInterval({interval: event.target.value}));\n    }\n\n    // const isAutoRefreshEnabled = () => calByDist.autoRefresh;\n    \n    return (\n        <Dialog id=\"settings\" className=\"bp3-dialog settings-dialog\"\n                isOpen={isOpen}\n                canOutsideClickClose={true}\n                onClose={handleClose}\n                usePortal={false}\n        >\n            <div className=\"bp3-dialog-header\">\n                <h4 className=\"bp3-heading\">Settings</h4>\n                <Button\n                    aria-label=\"Close\"\n                    className=\"bp3-dialog-close-button bp3-button bp3-minimal\"\n                    icon={\"cross\"}\n                    onClick={handleClose}\n                >\n                </Button>\n            </div>\n            <div className=\"bp3-dialog-body\">\n                <Card className=\"settings-item\">\n                    <ControlGroup vertical={true}>\n                        <div className=\"settings-caption-vertical\">\n                            View appointments of a Center as\n                        </div>\n                        <div className=\"bp3-html-select\">\n                            <select onChange={handleViewTypeChange} value={view}>\n                                {\n                                    viewOptions && viewOptions.map((option, id) => (\n                                        <option key={id} value={option}>{nickDisplayMap[option]}</option>\n                                    ))\n                                }\n                            </select>\n                            <Icon icon={\"double-caret-vertical\"} />\n                        </div>\n                    </ControlGroup>\n                </Card>\n                <Card className=\"settings-item\">\n                    <ControlGroup fill={true}>\n                        <Switch\n                            label={\"Auto refresh data\"}\n                            checked={autoRefresh}\n                            onChange={handleAutoRefreshChange}\n                            alignIndicator={\"right\"}\n                        />\n                        <div className=\"settings-caption-horizontal\">\n                            Auto-refresh Interval\n                        </div>\n                        <div className=\"bp3-html-select\">\n                            <select onChange={handleAutoRefreshValueChange}\n                                    value={autoRefreshInt || \"\"}\n                                    disabled={!autoRefresh}\n                            >\n                                {\n                                    refreshOptions && refreshOptions.map((option, id) => (\n                                        <option key={id} value={option}>{nickDisplayMap[option]}</option>\n                                    ))\n                                }\n                            </select>\n                            <Icon icon={\"double-caret-vertical\"} />\n                        </div>\n                    </ControlGroup>\n                </Card>\n            </div>\n        </Dialog>\n    )\n}\n\nexport default Settings;","import { React, useState } from \"react\";\nimport \"./_filter-popover.scss\";\nimport { Checkbox, Alignment, Button, Intent, H6 } from \"@blueprintjs/core\";\nimport { Classes, Popover2 } from \"@blueprintjs/popover2\"\nimport { useSelector } from \"react-redux\";\nimport { selectAgeFilter, selectVaccineFilter, setAgeFilter, setVaccineFilter } from \"../../cowin/cowinSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { FeeTypeFilters } from \"./FeeTypeFilters\";\n\nexport function FilterPopover() {\n\tconst dispatch = useDispatch();\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst vaccineFilter = useSelector(selectVaccineFilter);\n\tconst ageCategoryChecked = useSelector(selectAgeFilter)\n\n\tconst handleVaccineChange = (event, vaccine) => {\n\t\t// console.log(vaccine, event.target.checked);\n\t\tdispatch(setVaccineFilter({vaccine: vaccine, value: event.target.checked}));\n\t}\n\n\tconst handleAgeCategoryChange = (event) => {\n\t\tdispatch(setAgeFilter({age: event.target.id, value: event.target.checked}));\n\t}\n\n\treturn (\n\t\t<Popover2\n\t\t\tcontent={\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"filter-group\">\n\t\t\t\t\t\t<H6>Vaccines</H6>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tlabel={\"Covaxin\"}\n\t\t\t\t\t\t\tchecked={vaccineFilter.covaxin.checked}\n\t\t\t\t\t\t\tonChange={(event) => handleVaccineChange(event, \"COVAXIN\")}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tlabel={\"Covishield\"}\n\t\t\t\t\t\t\tchecked={vaccineFilter.covishield.checked}\n\t\t\t\t\t\t\tonChange={(event) => handleVaccineChange(event, \"COVISHIELD\")}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tlabel={\"Sputnik V\"}\n\t\t\t\t\t\t\tchecked={vaccineFilter.sputnik.checked}\n\t\t\t\t\t\t\tonChange={(event) => handleVaccineChange(event, \"SPUTNIK V\")}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"filter-group is-hidden-desktop\">\n\t\t\t\t\t\t<H6>Fee Type</H6>\n\t\t\t\t\t\t<FeeTypeFilters alignmentVertical={true} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"filter-group\">\n\t\t\t\t\t\t<H6>Age</H6>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tid=\"age-18-above\"\n\t\t\t\t\t\t\tlabel={\"18 and above\"}\n\t\t\t\t\t\t\tchecked={ageCategoryChecked.eighteenAbove}\n\t\t\t\t\t\t\tonChange={handleAgeCategoryChange}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tid=\"age-18-44\"\n\t\t\t\t\t\t\tlabel={\"18 to 44\"}\n\t\t\t\t\t\t\tchecked={ageCategoryChecked.eighteenFortyFour}\n\t\t\t\t\t\t\tonChange={(handleAgeCategoryChange)}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tclassName=\"filter-item\"\n\t\t\t\t\t\t\tid=\"age-45-above\"\n\t\t\t\t\t\t\tlabel={\"45 and above\"}\n\t\t\t\t\t\t\tchecked={ageCategoryChecked.fortyFiveAbove}\n\t\t\t\t\t\t\tonChange={handleAgeCategoryChange}\n\t\t\t\t\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Button intent={Intent.DANGER} className={Classes.POPOVER2_DISMISS} text=\"Close\" fill={true}/>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\tpopoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n\t\t\tinteractionKind=\"click\"\n\t\t\tisOpen={isOpen}\n\t\t\tonInteraction={state => setIsOpen(state)}\n\t\t\tplacement=\"bottom\"\n\t\t>\n\t\t\t<Button icon=\"filter-list\" text=\"Filters\" />\n\t\t</Popover2>\n\t);\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    fetchCalendarByDistrict,\n    fetchDistricts,\n    fetchStates,\n    resetCalendarByDistrictStore,\n    resetDistrictStore, selectAllDistricts,\n    selectAllStates,\n    selectFilteredData,\n    selectKeywordFilter,\n    selectSelectedDistrict,\n    selectSelectedState,\n    setKeywordFilter,\n    setSelectedDistrict,\n    setSelectedState\n} from \"../cowin/cowinSlice\";\nimport \"./_finder.scss\";\nimport { CenterCard } from \"./Center\";\nimport {DistrictSelector2, StateSelector2} from \"./Selectors\";\nimport {Button, Intent, NonIdealState, Spinner, TagInput} from \"@blueprintjs/core\";\nimport { FeeTypeFilters } from \"./filters/FeeTypeFilters\";\nimport {formatDate} from \"../../utils/DateUtilities\";\nimport Settings from \"../settings/Settings\";\nimport { FilterPopover } from \"./filters/FilterPopover\";\n\n/*\n* A component which shows the Available Slots (active slots returned by CoWIN API)\n* after the user selects a State and District.\n* It also allows filtering by attributes: keywords (center name, center address\n* and center block), fee type (Free/Paid).\n* */\nexport function AvailableSlots() {\n    const dispatch = useDispatch();\n    const calendarFetchStatus = useSelector((state) => state.cowin.status.calendarByDistrict);\n    // Use the filtered calendarByDistrict data from the store\n    const states = useSelector(selectAllStates);\n    const districts = useSelector(selectAllDistricts);\n    // const centers = useSelector(selectFilteredCalendarByDistrict);\n    const centers = useSelector(selectFilteredData);\n    const selectedState = useSelector(selectSelectedState);\n    const selectedDistrict = useSelector(selectSelectedDistrict);\n    const searchInputValues = useSelector(selectKeywordFilter);\n    const [isSettingsOpen, setSettingsOpen] = useState(false);\n    const autoRefresh = useSelector(state => state.settings.calendarByDistrictAutoRefresh);\n    const autoRefreshInterval = useSelector(state => state.settings.calendarByDistrictAutoRefreshInterval);\n    const statesFetchStatus = useSelector((state) => state.cowin.status.states);\n    const intervalRef = useRef();\n\n    const refreshData = () => {\n        if (selectedDistrict.districtName === \"Select a District\" || selectedState.stateName === \"Select a State\") {\n            return\n        }\n        let date = new Date();\n        date = formatDate(date, '-');\n        console.log(\"Refreshing data\", new Date().toLocaleTimeString(), {districtName: selectedDistrict.districtName});\n        dispatch(fetchCalendarByDistrict({districtId: selectedDistrict.districtId, date: date}));\n    }\n\n    useEffect(() => {\n        if (autoRefresh) {\n            console.log(\"Old timeout:\", intervalRef.current)\n            clearInterval(intervalRef.current);\n            let intervalId = setInterval(() => {\n                refreshData()\n            }, autoRefreshInterval);\n            intervalRef.current = intervalId;\n            console.log(\"New timeout:\", intervalRef.current)\n            return () => clearInterval(intervalRef.current);\n        }\n    });\n\n    // useEffect(() => {\n    //     if (autoRefresh) {\n    //         let timer = setTimeout(() => {\n    //                 refreshData();\n    //                 console.log(\"Refreshing data\", new Date().toLocaleTimeString(), {districtName: selectedDistrict.districtName});\n    //             },\n    //             autoRefreshInterval\n    //         );\n    //         console.log(\"New timeout:\", timer)\n    //         return () => clearTimeout(timer);\n    //     }\n    // });\n\n    // let timer;\n    // useEffect(() => {\n    //     if (autoRefresh) {\n    //         if (previousIntervalId) {\n    //             clearInterval(previousIntervalId)\n    //             console.log(\"Previous Interval:\", previousIntervalId)\n    //         }\n    //         let intervalId = setInterval(refreshData, autoRefreshInterval)\n    //         console.log(\"New Interval:\", intervalId)\n    //         setPreviousIntervalId(intervalId)\n    //         return () => clearInterval(intervalId);\n    //     }\n    // });\n\n    /*\n    * Decide what {content} to load in the \"centers\" div.\n    * Depending on the fetch status and filters, show nice contextual messages for each case.\n    * */\n    let content;\n    if (calendarFetchStatus === \"idle\" || selectedDistrict.district_name === \"Select a district\") {\n        content = <NonIdealState\n            icon={\"info-sign\"}\n            title={\"Select State and District\"}\n            description={\"You will be able to refresh data for a single center without reloading the page.\"}\n        />\n    }\n    else if (calendarFetchStatus === \"loading\") {\n        content = <Spinner className={\"centers-loading-spinner\"} intent={Intent.PRIMARY} size={50} />\n    }\n    else if (calendarFetchStatus === \"succeeded\" && centers.length === 0) {\n        content = <NonIdealState\n            icon={\"issue\"}\n            title={\"Currently, no slots are available.\"}\n            description={\"Please check again after sometime.\"}\n        />\n    }\n    else if (calendarFetchStatus === \"succeeded\") {\n        if (centers.length > 0) {\n            content = centers.map((center, id) => (\n                <CenterCard key={id} center={center} />\n            ));\n        }\n        else {\n            content = <NonIdealState\n                icon={\"zoom-out\"}\n                title={\"No centers match your query.\"}\n                description={\"It might be helpful to divide search into multiple keywords.\"}\n            />\n        }\n    } else if (calendarFetchStatus === \"failed\") {\n        content = <NonIdealState\n            icon={\"error\"}\n            title={\"There was a problem!\"}\n            description={\"Couldn't load data.\"}\n        />\n    }\n\n    // Clear Button element to clear/reset the Search bar\n    const clearButton = (\n        <Button\n            icon={\"cross\"}\n            minimal={true}\n            onClick={() => dispatch(setKeywordFilter([]))}\n        />\n    );\n\n    const toggleSettings = () => {\n        setSettingsOpen(!isSettingsOpen);\n    }\n\n    // Fetch states for StateSelector when it mounts\n    useEffect(() => {\n        if (statesFetchStatus === \"idle\") {\n            dispatch(fetchStates());\n        }\n    }, [statesFetchStatus, dispatch]);\n\n    const handleStateChange = (state) => {\n        // TODO: Changed the dispatch order here\n        // Reset the current District and Center list by resetting the store\n        dispatch(resetDistrictStore());\n        dispatch(resetCalendarByDistrictStore());\n        dispatch(setSelectedState({stateId: state.state_id, stateName: state.state_name}));\n        // Fetch new districts for the new State\n        dispatch(fetchDistricts({stateId: state.state_id}));\n        // Reset the District selector value\n        dispatch(setSelectedDistrict({districtName: \"Select a District\"}))\n    }\n\n    const handleDistrictChange = (district) => {\n        dispatch(setSelectedDistrict({districtId: district.district_id, districtName: district.district_name}))\n        let date = new Date();\n        date = formatDate(date, '-');\n        dispatch(fetchCalendarByDistrict({districtId: district.district_id, date: date}));\n    }\n\n    return (\n        <div className=\"slot-checker-container\">\n            <div className=\"slot-checker\">\n                <div className=\"header\">\n                    Slot Finder\n                </div>\n                <div className=\"slot-toolbar-container\">\n                    <div className=\"slot-toolbar columns\">\n                        <div className=\"slot-toolbar-item-group selectors column is-narrow-desktop\">\n                            <StateSelector2\n                                states={states}\n                                selectedState={selectedState}\n                                setState={handleStateChange}\n                            />\n                            <DistrictSelector2\n                                districts={districts}\n                                selectedDistrict={selectedDistrict}\n                                setDistrict={handleDistrictChange}\n                            />\n                        </div>\n                        <div className=\"slot-toolbar-item-group column\">\n                            <TagInput\n                                className=\"slot-toolbar-item search\"\n                                leftIcon={\"search\"}\n                                placeholder={\"Search with multiple keywords..\"}\n                                onChange={(values => dispatch(setKeywordFilter(values)))}\n                                values={searchInputValues}\n                                rightElement={clearButton}\n                            />\n                            <div className=\"is-hidden-mobile slot-toolbar-item fee-types-container\">\n                                <FeeTypeFilters alignmentVertical={false}/>\n                            </div>\n                        </div>\n                        <div className=\"slot-toolbar-item-group column is-narrow-desktop\">\n                            <div className=\"slot-toolbar-item\">\n                                <Button icon={\"refresh\"} text={\"Refresh\"} onClick={refreshData}/>\n                            </div>\n                            <div className=\"slot-toolbar-item\">\n                                <FilterPopover />\n                            </div>\n                            <div className=\"slot-toolbar-item\">\n                                <Button icon={\"settings\"} text={\"Settings\"} onClick={toggleSettings}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"centers\">\n                    {content}\n                </div>\n            </div>\n            <Settings isOpen={isSettingsOpen} setIsOpen={setSettingsOpen}/>\n        </div>\n    )\n}","import { Button, Classes, H1, H3, TagInput } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React from \"react\";\nimport \"./_home.scss\"\n\n\nexport function Home() {\n    return (\n        <div id=\"home\">\n            <div className=\"home-container\">\n\t\t\t\t<div className=\"home-content\">\n\t\t\t\t\t<H1 className=\"home-title\">Find-a-CoWIN</H1>\n\t\t\t\t\t<span>A slot finder/checker for the CoWIN vaccination platform</span>\n\t\t\t\t\t<span>built using the CoWIN Public API.</span>\n\t\t\t\t\t<div className=\"home-links\">\n\t\t\t\t\t\t<a href=\"https://faraaz.tech/contact\">\n\t\t\t\t\t\t\t<Tooltip2 content={\"Get in touch\"} position={\"bottom\"}>\n\t\t\t\t\t\t\t\t<Button className={Classes.MINIMAL} icon=\"user\" text=\"faraaz.tech\" />\n\t\t\t\t\t\t\t</Tooltip2>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"https://github.com/faraazb/find-a-cowin\">\n\t\t\t\t\t\t\t<Tooltip2 content={\"Check out the source code\"} position=\"bottom\">\n\t\t\t\t\t\t\t\t<Button className={Classes.MINIMAL} icon=\"git-branch\" text=\"GitHub\" />\n\t\t\t\t\t\t\t</Tooltip2>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<H3 className=\"home-help-title\">Help regarding Usage</H3>\n\t\t\t\t\t<div className=\"home-help\"> \n\t\t\t\t\t\t<table class=\"bp3-html-table bp3-html-table-bordered query-table\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Query</th>\n\t\t\t\t\t\t\t\t<th>Answer</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>Nothing happens when I type in the search bar..</td>\n\t\t\t\t\t\t\t\t<td>Press enter key! This is so that you can use multiple keywords. \n\t\t\t\t\t\t\t\t\tFor e.g. <TagInput values={[\"Andheri\", \"Borivali\"]}/> to get all the centers \n\t\t\t\t\t\t\t\t\tthat match for <b>either</b> Andheri or Borivali.</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>What does the refresh button do?</td>\n\t\t\t\t\t\t\t\t<td>It fetches the data again, without refreshing the page or resetting your filters.</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>What does auto-refresh under Settings do?</td>\n\t\t\t\t\t\t\t\t<td>It regularly fetches new data for the selected district at the selected interval.</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n            </div>\n        </div>\n    )\n}","import './_app.scss';\nimport React, {useEffect, useState} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport { resetSettings } from './features/settings/settingsSlice';\nimport {AvailableSlots} from \"./features/finder/Finder\";\nimport {BrowserRouter, NavLink, Route, Switch} from \"react-router-dom\";\nimport {FocusStyleManager, Alignment, Button, Classes, Navbar, NavbarDivider, NavbarGroup, \n    NavbarHeading} from \"@blueprintjs/core\";\nimport { Home } from './features/home/Home';\n\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nfunction App() {\n    const dispatch = useDispatch();\n    const initializeSettings = !localStorage.getItem('SETTINGS')\n\n    const switchTheme = () => {\n        const div = document.getElementById(\"app\");\n        if (div.classList.contains(\"bp3-dark\")) {\n            div.classList.remove(\"bp3-dark\");\n            setThemeButton({name: \"Dark Theme\", icon: \"moon\"});\n        }\n        else if (!div.classList.contains(\"bp3-dark\")) {\n            div.classList.add(\"bp3-dark\");\n            setThemeButton({name: \"Light Theme\", icon: \"flash\"});\n        }\n    }\n\n    const useThemeDetector = () => {\n        const getCurrentTheme = () => window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n        const [isDarkTheme, setIsDarkTheme] = useState(getCurrentTheme());\n\n        const mqListener = (e => {\n            setIsDarkTheme(e.matches);\n        });\n        \n        useEffect(() => {\n          const darkThemeMq = window.matchMedia(\"(prefers-color-scheme: dark)\");\n          darkThemeMq.addEventListener(\"change\", mqListener);\n          return () => darkThemeMq.removeEventListener(\"change\", mqListener);\n        }, []);\n        return isDarkTheme;\n    }\n\n    const isDarkTheme = useThemeDetector()\n    const [themeButton, setThemeButton] = useState(\n        {\n            name: isDarkTheme ? \"Light Theme\" : \"Dark Theme\", \n            icon: isDarkTheme ? \"flash\" : \"moon\"\n        }\n    );\n\n    useEffect(() => {\n        if (isDarkTheme) {\n            const div = document.getElementById(\"app\");\n            div.classList.add(\"bp3-dark\");\n        }\n    }, [isDarkTheme])\n\n    useEffect(() => {\n        if (initializeSettings) {\n            console.log(\"Resetting settings\")\n            dispatch(resetSettings());\n        }\n    });\n\n    return (\n    <BrowserRouter>\n        <div id=\"app\">\n            <Navbar>\n                <NavbarGroup align={Alignment.LEFT}>\n                    <NavLink to=\"/\" id=\"find-a-cowin\">\n                        <NavbarHeading className=\"navigation-header\">\n                            <span className=\"bp3-heading\">Find-a-CoWIN</span>\n                        </NavbarHeading>\n                    </NavLink>\n                    <NavbarDivider />\n                    <NavLink to=\"/about\">\n                        <Button className={Classes.MINIMAL} icon=\"info-sign\" text=\"About\" />\n                    </NavLink>\n                </NavbarGroup>\n                <NavbarGroup align={Alignment.RIGHT}>\n                    <Button\n                        className={Classes.MINIMAL}\n                        icon={themeButton.icon}\n                        text={themeButton.name}\n                        onClick={switchTheme}\n                    />\n                </NavbarGroup>\n            </Navbar>\n            <div className=\"app-route\">\n                <Switch>\n                    <Route path=\"/about\">\n                        <Home />\n                    </Route>\n\n                    <Route path=\"/\">\n                        <AvailableSlots />\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n    </BrowserRouter>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport cowinReducer from \"../features/cowin/cowinSlice\";\nimport settingsReducer from \"../features/settings/settingsSlice\";\n\nexport const store = configureStore({\n    reducer: {\n        cowin: cowinReducer,\n        settings: settingsReducer,\n    },\n});","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from \"./app/store\";\nimport {Provider} from \"react-redux\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}